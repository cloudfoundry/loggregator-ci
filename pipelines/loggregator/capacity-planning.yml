resources:
- name: cf-deployment-concourse-tasks
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks
    branch: v3.5

- name: deployments-loggregator
  type: git
  source: &deployments_loggregator
    uri: git@github.com:cloudfoundry/deployments-loggregator.git
    branch: master
    private_key: {{deployments-loggregator-key}}

- name: loggregator-capacity-planning-release
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/loggregator-capacity-planning-release
    branch: master

- name: loggregator-ci
  type: git
  source:
    uri: git@github.com:cloudfoundry/loggregator-ci.git
    branch: master
    private_key: {{deployments-loggregator-key}}

- name: cf-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment
    branch: master

# This is here because concourse has a bug in which putting to a git resource
# creates a new version that can trigger jobs even if the commit has [ci skip]
# present.
- name: deployments-loggregator-with-changes
  type: git
  source: *deployments_loggregator

- name: gcp-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-trusty-go_agent

- name: datadog-firehose-nozzle-release
  type: git
  source: &datadog-firehose-nozzle-release
    uri: git@github.com:cloudfoundry-incubator/datadog-firehose-nozzle-release.git
    branch: master
    private_key: {{datadog-firehose-nozzle-release-key}}

jobs:
- name: bbl-create
  public: false
  plan:
  - get: cf-deployment-concourse-tasks
    trigger: false
  - get: bbl-state
    resource: deployments-loggregator
    trigger: false
  - task: bbl-up
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    params:
      BBL_GCP_SERVICE_ACCOUNT_KEY: service-account.key.json
      BBL_GCP_PROJECT_ID: cff-loggregator
      BBL_GCP_ZONE: us-central1-a
      BBL_GCP_REGION: us-central1
      BBL_STATE_DIR: gcp/loggregator-capacity-planning
      BBL_IAAS: gcp
      BBL_LB_CERT: {{coconut_director_cert}}
      BBL_LB_KEY: {{coconut_director_key}}
      BBL_ENV_NAME: loggregator-capacity-planning
      LB_DOMAIN: loggregator-capacity-planning.cf-app.com
  - put: deployments-loggregator-with-changes
    params:
      repository: updated-bbl-state
      rebase: true

- name: destroy-environment
  public: false
  plan:
  - get: cf-deployment-concourse-tasks
    trigger: false
  - get: bbl-state
    resource: deployments-loggregator
    trigger: false
  - aggregate:
    - task: delete-datadog-firehose-nozzle
      file: cf-deployment-concourse-tasks/bosh-delete-deployment/task.yml
      params:
        BBL_STATE_DIR: gcp/loggregator-capacity-planning
        DEPLOYMENT_NAME: datadog
    - task: delete-cf
      file: cf-deployment-concourse-tasks/bosh-delete-deployment/task.yml
      params:
        BBL_STATE_DIR: gcp/loggregator-capacity-planning
        DEPLOYMENT_NAME: cf
  - task: bbl-destroy
    file: cf-deployment-concourse-tasks/bbl-destroy/task.yml
    params:
      BBL_STATE_DIR: gcp/loggregator-capacity-planning
  - put: deployments-loggregator-with-changes
    params:
      repository: updated-bbl-state
      rebase: true

- name: loggregator-capacity-planning-deploy
  serial: true
  plan:
    - aggregate:
      - get: loggregator-ci
      - get: bbl-state
        resource: deployments-loggregator
      - get: cf-deployment
      - get: cf-deployment-concourse-tasks
      - get: vars-store
        resource: deployments-loggregator
      - get: vars-files
        resource: deployments-loggregator
      - get: loggregator-capacity-planning-release
    - task: upload-stemcell
      file: cf-deployment-concourse-tasks/bosh-upload-stemcell-from-cf-deployment/task.yml
      params:
        BBL_STATE_DIR: gcp/loggregator-capacity-planning
    - task: copy-ops-files
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: { repository: ubuntu }
        inputs:
        - name: bbl-state
        - name: cf-deployment
        outputs:
        - name: ops-files
        params:
          DOPPLER_INSTANCE_COUNT: 1
          LOG_API_INSTANCE_COUNT: 1
          DIEGO_CELL_INSTANCE_COUNT: 2
          ROUTER_COUNT: 4
        run:
          path: /bin/bash
          args:
          - "-c"
          - |
            #!/bin/bash
            set -ex

            cp cf-deployment/operations/experimental/enable-loggregator-v2-diego-cell.yml ops-files/
            cp cf-deployment/operations/workarounds/use-4-azs-for-router.yml ops-files/
            cp bbl-state/gcp/loggregator-capacity-planning/ops-files/*.yml ops-files/

            cat <<EOT >> ops-files/capacity-planning-config.yml
            - type: replace
              path: /instance_groups/name=doppler/instances
              value: $DOPPLER_INSTANCE_COUNT
            - type: replace
              path: /instance_groups/name=router/instances
              value: $ROUTER_COUNT
            - type: replace
              path: /instance_groups/name=log-api/instances
              value: $LOG_API_INSTANCE_COUNT
            - type: replace
              path: /instance_groups/name=diego-cell/instances
              value: $DIEGO_CELL_INSTANCE_COUNT
            EOT
    - task: cf-deploy
      file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
      params:
        BBL_STATE_DIR: gcp/loggregator-capacity-planning
        SYSTEM_DOMAIN: loggregator-capacity-planning.cf-app.com
        VARS_STORE_FILE: gcp/loggregator-capacity-planning/deployment-vars.yml
        OPS_FILES: "clients.yml use-4-azs-for-router.yml capacity-planning-config.yml enable-loggregator-v2-diego-cell.yml"
    - put: deployments-loggregator-with-changes
      params:
        repository: updated-vars-store
        rebase: true
    - task: capacity-planning-deploy
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
            tag: v2.2.0
        inputs:
        - name: bbl-state
        - name: loggregator-capacity-planning-release
        - name: updated-vars-store
        outputs:
        - name: updated-capacity-planning-vars-store
        params:
          SYSTEM_DOMAIN: loggregator-capacity-planning.cf-app.com
          CLIENT_ID: capacity_planning_authenticator
          API_VERSION: v2
          METRICS_PER_SECOND: 500
          METRIC_EMITTER_COUNT: 2
          EVENT_COUNTER_COUNT: 2
        run:
          path: /bin/bash
          args:
          - "-c"
          - |
            #!/bin/bash
            set -ex

            BBL_DIR=$PWD/updated-vars-store/gcp/loggregator-capacity-planning

            pushd updated-vars-store/gcp/loggregator-capacity-planning
              export BOSH_CLIENT=`bbl director-username`
              export BOSH_CLIENT_SECRET=`bbl director-password`
              export BOSH_CA_CERT=`bbl director-ca-cert`
              export BOSH_ENVIRONMENT=`bbl director-address`

              export DATADOG_API_KEY=`bosh int datadog-vars.yml --path=/datadog_key`
              export CLIENT_SECRET=`bosh int deployment-vars.yml --path=/capacity_planning_authenticator_secret`
            popd

            cat <<EOT >> /tmp/overrides.yml
            - type: replace
              path: /instance_groups/name=event_counter/instances?
              value: $EVENT_COUNTER_COUNT
            - type: replace
              path: /instance_groups/name=metric_emitter/instances?
              value: $METRIC_EMITTER_COUNT
            - type: replace
              path: /instance_groups/name=metric_emitter/jobs/name=metric_emitter/properties/metric_emitter/api_version?
              value: $API_VERSION
            - type: replace
              path: /instance_groups/name=metric_emitter/jobs/name=metric_emitter/properties/metric_emitter/metrics_per_second?
              value: $METRICS_PER_SECOND
            EOT

            pushd loggregator-capacity-planning-release
              bosh create-release
              bosh upload-release --rebase

              bosh -d loggregator_capacity_planning deploy -n manifests/loggregator-capacity-planning.yml \
                -v system_domain=$SYSTEM_DOMAIN \
                -v datadog_api_key=$DATADOG_API_KEY \
                -v client_id=$CLIENT_ID \
                -v client_secret=$CLIENT_SECRET \
                -l $BBL_DIR/deployment-vars.yml \
                -o /tmp/overrides.yml \
                --vars-store $BBL_DIR/capacity-planning-vars.yml
            popd

            pushd updated-vars-store
              if [ ! "$(git status --porcelain)" = "" ]; then
                git config user.email "cf-loggregator@pivotal.io"
                git config user.name "Loggregator CI"
                git add .
                git commit -m "Updating capacity planning deployment vars"
              else
                echo "No changes to commit"
              fi
            popd

            rsync -ac updated-vars-store/ updated-capacity-planning-vars-store/.
    - put: deployments-loggregator-with-changes
      params:
        repository: updated-capacity-planning-vars-store
        rebase: true
    - task: create-org-and-space
      file: loggregator-ci/tasks/create-org-and-space.yml
      params:
        VARS_STORE_FILE: gcp/loggregator-capacity-planning/deployment-vars.yml
        ORG: capacity-planning
        SPACE: capacity-planning
        SYSTEM_DOMAIN: loggregator-capacity-planning.cf-app.com
    - task: deploy-log-emitter
      config:
        image_resource:
          type: docker-image
          source:
            repository: loggregator/base
        platform: linux
        inputs:
          - name: vars-store
          - name: loggregator-capacity-planning-release
        params:
          VARS_STORE_FILE: gcp/loggregator-capacity-planning/deployment-vars.yml
          ORG: capacity-planning
          SPACE: capacity-planning
          SYSTEM_DOMAIN: loggregator-capacity-planning.cf-app.com
          LOGS_PER_SECOND: 125
          LOG_BYTES: 1000
          INSTANCES_PER_APP: 2
          NUMBER_OF_APPS: 4
          DATADOG_API_KEY: {{datadog-dev-api-key}}
        run:
          path: bash
          args:
          - -c
          - |
            #!/bin/bash
            set -ex
            CF_PASSWORD=$(bosh int vars-store/$VARS_STORE_FILE --path=/cf_admin_password)
            CF_USERNAME=admin
            CLIENT_ID="capacity_planning_authenticator"
            CLIENT_SECRET=$(bosh int vars-store/$VARS_STORE_FILE --path=/capacity_planning_authenticator_secret)

            cf login -a api.$SYSTEM_DOMAIN -u $CF_USERNAME -p $CF_PASSWORD -o $ORG -s $SPACE --skip-ssl-validation

            flags="--logs-per-second=$LOGS_PER_SECOND"
            flags="$flags --log-bytes=$LOG_BYTES"
            flags="$flags --datadog-api-key=$DATADOG_API_KEY"
            flags="$flags --client-id=$CLIENT_ID"
            flags="$flags --client-secret=$CLIENT_SECRET"

            export GOPATH="$PWD/loggregator-capacity-planning-release"
            pushd loggregator-capacity-planning-release/src/code.cloudfoundry.org/log_emitter
              go build

              for i in $(seq $NUMBER_OF_APPS); do
                cf push "log_emitter-$i" \
                  -b binary_buildpack \
                  -c "./log_emitter $flags" \
                  -i $INSTANCES_PER_APP \
                  -m 64M \
                  -k 128M \
                  -u none
              done
            popd
    - task: setup-datadog-event
      file: loggregator-ci/tasks/capacity-planning/setup-datadog-event.yml
      params:
          DATADOG_API_KEY: {{datadog-dev-api-key}}

- name: datadog-nozzle-deploy
  serial: true
  plan:
  - aggregate:
    - get: gcp-stemcell
      trigger: false
    - get: datadog-firehose-nozzle-release
      trigger: false
    - get: deployments-loggregator
      trigger: false
  - task: create-release
    config:
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/base
      platform: linux
      inputs:
      - name: datadog-firehose-nozzle-release
      outputs:
      - name: datadog-release
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash

            set -ex

            cd datadog-firehose-nozzle-release
            bosh -n create-release --tarball ../datadog-release/release.tgz
  - task: deploy
    config:
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
      platform: linux
      inputs:
      - name: datadog-release
      - name: deployments-loggregator
      - name: datadog-firehose-nozzle-release
      params:
        MANIFEST_FILE: datadog-firehose-nozzle-release/templates/datadog-bosh2.yml
        MANIFEST_VARS: deployments-loggregator/gcp/loggregator-capacity-planning/datadog-vars.yml
        DEPLOYMENT_NAME: datadog
        METRIC_PREFIX: capacity-planning.datadog.nozzle.
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash

            set -e -x

            source ~/.bashrc

            pushd deployments-loggregator/gcp/loggregator-capacity-planning
              export BOSH_CLIENT=`bbl director-username`
              export BOSH_CLIENT_SECRET=`bbl director-password`
              export BOSH_CA_CERT=`bbl director-ca-cert`
              export BOSH_ENVIRONMENT=`bbl director-address`
            popd

            bosh -n upload-release datadog-release/*.tgz --rebase
            bosh -n -d ${DEPLOYMENT_NAME} deploy ${MANIFEST_FILE} -l ${MANIFEST_VARS} \
              -o deployments-loggregator/gcp/loggregator-capacity-planning/ops-files/datadog.yml

