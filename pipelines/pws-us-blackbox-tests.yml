resources:
- name: 5m
  type: time
  source: {interval: 5m}
- name: 10m
  type: time
  source: {interval: 10m}
- name: 20m
  type: time
  source: {interval: 20m}
- name: 1h
  type: time
  source: {interval: 1h}
- name: daily
  type: time
  source:
    start: 8:00 PM
    stop: 9:00 PM
    location: America/Denver
- name: loggregator-ci
  type: git
  source:
    uri: https://github.com/cloudfoundry/loggregator-ci
- name: loggregator
  type: git
  source:
    uri: https://github.com/cloudfoundry/loggregator-release
    branch: develop
- name: loggregator-tools
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/loggregator-tools

jobs:
- name: restage-logemitter
  public: false
  serial: true
  plan:
  - get: daily
    trigger: true
  - get: loggregator-ci
  - get: loggregator-tools
  - task: restage-logemitter
    file: loggregator-ci/tasks/blackbox/restage-apps/task.yml
    params:
      APP_NAMES: "logemitter"
      APP: "logemitter"
      CF_API: "api.run.pivotal.io"
      ORG: "cf-lamb"
      PASSWORD: {{pws-password}}
      SPACE: "development"
      USERNAME: {{pws-username}}
      USE_CLIENT_AUTH: true
  - task: ensure-drain
    file: loggregator-ci/tasks/blackbox/ensure-drain/task.yml
    params:
      EMITTER_NAME: logemitter
      DRAIN_NAME: "papertrail-drain"
      DRAIN_URL: ((papertrail-drain-url))
      CF_API: "api.run.pivotal.io"
      ORG: "cf-lamb"
      PASSWORD: {{pws-password}}
      SPACE: "development"
      USERNAME: {{pws-username}}
      USE_CLIENT_AUTH: true

- name: restage-logcounter
  public: false
  serial: true
  plan:
  - get: daily
    trigger: true
  - get: loggregator-ci
  - get: loggregator-tools
  - task: restage-logemitter
    file: loggregator-ci/tasks/blackbox/restage-apps/task.yml
    params:
      APP_NAMES: "postcounter"
      APP: "postcounter"
      CF_API: "api.run.pivotal.io"
      ORG: "cf-lamb"
      PASSWORD: {{pws-password}}
      SPACE: "development"
      USERNAME: {{pws-username}}
      USE_CLIENT_AUTH: true
  - task: ensure-drain
    file: loggregator-ci/tasks/blackbox/ensure-drain/task.yml
    params:
      EMITTER_NAME: logemitter
      DRAIN_NAME: "postcounter-drain"
      DRAIN_URL: ((postcounter-drain-url))
      CF_API: "api.run.pivotal.io"
      ORG: "cf-lamb"
      PASSWORD: {{pws-password}}
      SPACE: "development"
      USERNAME: {{pws-username}}
      USE_CLIENT_AUTH: true

- name: floodspinner
  public: false
  serial: true
  plan:
  - get: loggregator-ci
  - get: 20m
    trigger: true
  - task: run-smoke-tests
    file: loggregator-ci/tasks/blackbox/logspinner/task.yml
    params:
      CF_API: "api.run.pivotal.io"
      APP_DOMAIN: "floodspinner.cfapps.io"
      ORG: "cf-lamb"
      SPACE: "development"
      APP_NAME: "floodspinner"
      USERNAME: {{pws-username}}
      PASSWORD: {{pws-password}}
      WAIT: 60
      CYCLES: 10000
      DATADOG_API_KEY: "((datadog-loggregator-api-key)) ((datadog-prod-api-key))"
      DELAY: "2"
      DELAY_UNIT: "us"
      MESSAGE: "FIFTEEN-MINUTE"
      USE_CLIENT_AUTH: true
    timeout: 20m
  - task: run-recent-logs-smoke-tests
    file: loggregator-ci/tasks/blackbox/recent-logs/task.yml
    params:
      APP_NAME: "floodspinner"
      CF_API: "api.run.pivotal.io"
      DATADOG_API_KEY: {{datadog-loggregator-api-key}}
      LOGGREGATOR_ADDR: "wss://doppler.run.pivotal.io:443"
      ORG: "cf-lamb"
      PASSWORD: {{pws-password}}
      SPACE: "development"
      USERNAME: {{pws-username}}
      USE_CLIENT_AUTH: true
    timeout: 20m

- name: dripspinner
  public: false
  serial: true
  plan:
  - get: loggregator-ci
  - get: 1h
    trigger: true
  - task: run-smoke-tests
    file: loggregator-ci/tasks/blackbox/logspinner/task.yml
    params:
      CF_API: "api.run.pivotal.io"
      APP_DOMAIN: "dripspinner.cfapps.io"
      ORG: "cf-lamb"
      SPACE: "development"
      APP_NAME: "dripspinner"
      USERNAME: {{pws-username}}
      PASSWORD: {{pws-password}}
      WAIT: 600
      CYCLES: 1000
      DATADOG_API_KEY: "((datadog-loggregator-api-key)) ((datadog-prod-api-key))"
      DELAY: "500"
      DELAY_UNIT: "ms"
      MESSAGE: "HOURLY"
      USE_CLIENT_AUTH: true
    timeout: 20m

- name: flowspinner
  public: false
  serial: true
  plan:
  - get: loggregator-ci
  - get: 1h
    trigger: true
  - task: run-smoke-tests
    file: loggregator-ci/tasks/blackbox/logspinner/task.yml
    params:
      CF_API: "api.run.pivotal.io"
      APP_DOMAIN: "flowspinner.cfapps.io"
      ORG: "cf-lamb"
      SPACE: "development"
      APP_NAME: "flowspinner"
      USERNAME: {{pws-username}}
      PASSWORD: {{pws-password}}
      WAIT: 60
      CYCLES: 1000
      DATADOG_API_KEY: "((datadog-loggregator-api-key)) ((datadog-prod-api-key))"
      DELAY: "1"
      DELAY_UNIT: "ms"
      MESSAGE: "HOURLY"
      USE_CLIENT_AUTH: true
    timeout: 20m

- name: tcp-syslog-monitor
  public: false
  serial: true
  plan:
  - get: 5m
    trigger: true
  - task: measure
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/base
      params:
        API_TOKEN: ((papertrail-api-token))
        PAPERTRAIL_GROUP: loggregator-smoke-tests
        DATADOG_API_KEY: {{datadog-prod-api-key}}
        DATADOG_API_URL: https://app.datadoghq.com/api/v1/series
        CF_SYSTEM_DOMAIN: run.pivotal.io
        DRAIN_VERSION: "2.0"
        DRAIN_TYPE: "tcp"
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -e

          gem install papertrail
          echo "token: $API_TOKEN" > config.yml
          log_count=$(papertrail -c config.yml -g $PAPERTRAIL_GROUP --min-time '359 seconds ago' --max-time '60 seconds ago' | wc -l)
          logs_per_minute=$((log_count / 5))

          smoke_test_success=0
          if [[ $logs_per_minute -ge 9900 ]]; then
            smoke_test_success=1
          fi

          echo "posting to datadog. value = $logs_per_minute success = $smoke_test_success"

          payload=$(cat <<JSON
          {
              "series": [
                {
                    "metric": "smoke_test.syslog.log_count",
                    "points": [[$(date +%s), $logs_per_minute]],
                    "type": "gauge",
                    "host": "$CF_SYSTEM_DOMAIN",
                    "tags": [
                        "drain_version:$DRAIN_VERSION",
                        "drain_type:$DRAIN_TYPE"
                    ]
                },
                {
                    "metric": "smoke_test.syslog.success",
                    "points": [[$(date +%s), $smoke_test_success]],
                    "type": "gauge",
                    "host": "$CF_SYSTEM_DOMAIN",
                    "tags": [
                        "drain_version:$DRAIN_VERSION",
                        "drain_type:$DRAIN_TYPE"
                    ]
                }
              ]
          }
          JSON
          )

          datadog_url=$DATADOG_API_URL?api_key=$DATADOG_API_KEY
          curl -X POST -H "Content-type: application/json" -d "$payload" $datadog_url

- name: http-syslog-monitor
  public: false
  serial: true
  plan:
  - get: 5m
    trigger: true
  - task: measure
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/base
      params:
        APP_NAME: postcounter
        DATADOG_API_KEY: {{datadog-prod-api-key}}
        DATADOG_API_URL: https://app.datadoghq.com/api/v1/series
        CF_SYSTEM_DOMAIN: run.pivotal.io
        CF_APPS_DOMAIN: cfapps.io
        DRAIN_VERSION: "2.0"
        DRAIN_TYPE: "https"
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -e

          log_count=$(curl https://$APP_NAME.$CF_APPS_DOMAIN)

          echo "posting to datadog. value = $log_count"
          payload=$(cat <<JSON
          {
              "series": [{
                  "metric": "smoke_test.syslog.log_count",
                  "points": [[$(date +%s), $log_count]],
                  "type": "gauge",
                  "host": "$CF_SYSTEM_DOMAIN",
                  "tags": [
                      "drain_version:$DRAIN_VERSION",
                      "drain_type:$DRAIN_TYPE"
                  ]
              }]
          }
          JSON
          )

          datadog_url=$DATADOG_API_URL?api_key=$DATADOG_API_KEY
          curl -X POST -H "Content-type: application/json" -d "$payload" $datadog_url

- name: latency
  public: false
  serial: true
  plan:
  - get: loggregator-tools
  - get: loggregator-ci
  - get: 20m
    trigger: true
  - task: run-latency-tests
    file: loggregator-ci/tasks/blackbox/latency-test/task.yml
    params:
      APP_DOMAIN: "loggregator-latency.cfapps.io"
      APP_NAME: "loggregator-latency"
      CF_API: "api.run.pivotal.io"
      DATADOG_API_KEY: {{datadog-loggregator-api-key}}
      ORG: "cf-lamb"
      PASSWORD: {{pws-password}}
      SPACE: "development"
      USERNAME: {{pws-username}}
      USE_CLIENT_AUTH: true
    timeout: 20m

- name: firehose-reliability
  public: false
  serial: true
  plan:
  - in_parallel:
    - get: loggregator
    - get: loggregator-ci
    - get: loggregator-tools
  - get: 10m
    trigger: true
  - task: run-firehose-reliability
    file: loggregator-ci/tasks/blackbox/firehose-reliability/task.yml
    params:
      APP_DOMAIN: "loggregator-firehose-reliability.cfapps.io"
      APP_NAME: "loggregator-firehose-reliability"
      CF_API: "api.run.pivotal.io"
      DATADOG_API_KEY: {{datadog-loggregator-api-key}}
      ORG: "cf-lamb"
      SPACE: "development"
      USERNAME: {{pws-username}}
      PASSWORD: {{pws-password}}
      CLIENT_ID: {{pws-firehose-reliability-client-id}}
      CLIENT_SECRET: {{pws-firehose-reliability-client-secret}}
      WORKER_INSTANCE_COUNT: 14
      APP_WS_PORT: 4443
      USE_CLIENT_AUTH: true
    timeout: 5m

