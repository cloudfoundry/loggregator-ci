resources:
- name: wats
  type: git
  source:
    uri: https://github.com/cloudfoundry/wats
    branch: master

- name: cats
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-acceptance-tests
    branch: master

- name: cf-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment
    branch: develop

- name: consul-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/consul-release

- name: cf-release
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-release
    branch: release-candidate

- name: cf-release-develop
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-release
    branch: develop

- name: diego-release
  type: git
  source:
    uri: https://github.com/cloudfoundry/diego-release
    branch: master

- name: diego-github-releases
  type: github-release
  source:
    user: cloudfoundry
    repository: diego-release
    access_token: {{access-token}}

- name: deployments-loggregator
  type: git
  source: &deployments_loggregator
    uri: git@github.com:cloudfoundry/deployments-loggregator.git
    branch: master
    private_key: {{deployments-loggregator-key}}

# This is here because concourse has a bug in which putting to a git resource
# creates a new version that can trigger jobs even if the commit has [ci skip]
# present.
- name: deployments-loggregator-with-changes
  type: git
  source: *deployments_loggregator

- name: etcd-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/etcd-release

- name: gcp-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-trusty-go_agent

- name: loggregator-develop
  type: git
  source: &loggregator_develop
    uri: git@github.com:cloudfoundry/loggregator.git
    branch: develop
    private_key: {{loggregator-key}}
    ignore_paths:
    - .final_builds
    - releases

- name: loggregator-release-elect
  type: git
  source:
    uri: git@github.com:cloudfoundry/loggregator.git
    branch: release-elect
    private_key: {{loggregator-key}}
    ignore_paths:
    - .final_builds
    - releases

jobs:
- name: run-tests
  public: true
  plan:
  - get: loggregator
    resource: loggregator-develop
    trigger: true
  - task: run-tests
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/go17
      inputs:
      - name: loggregator
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          cd loggregator

          export GOPATH=`pwd`
          export TERM=xterm

          go version
          go install github.com/onsi/ginkgo/ginkgo
          go get github.com/mattn/goveralls

          scripts/test

- name: run-windows-tests
  public: true
  serial: true
  plan:
  - get: loggregator
    resource: loggregator-develop
    trigger: true
  - task: build-windows-test-binary
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/go17
      inputs:
      - name: loggregator
      outputs:
      - name: binaries
      - name: test-binaries
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          cd loggregator
          export GOPATH=$PWD
          export GOOS=windows
          function munge {
            echo $1 | tr '/' '_'
          }
          for pkg in $(go list metron/...); do
            go test -c -o ../test-binaries/$(munge $pkg)_test.exe $pkg
          done
          go build -o ../binaries/metron.exe metron
  - task: run-windows-tests
    config:
      platform: windows
      inputs:
      - name: binaries
      - name: test-binaries
      run:
        path: powershell
        args:
        - "-command"
        - |
          trap {
            write-error $_
            exit 1
          }

          $env:SKIP_BUILD = "true"
          $env:METRON_BUILD_PATH = "binaries\metron.exe"

          # Run all test binaries
          Get-ChildItem -Filter test-binaries\*.exe | ForEach {
            &$_.Fullname /s
            if ($LastExitCode -ne 0) {
              throw "test failed"
            }
          }

- name: upload-stemcell
  plan:
  - aggregate:
    - get: gcp-stemcell
      trigger: true
    - get: deployments-loggregator
  - task: load-stemcell
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      inputs:
      - name: gcp-stemcell
      - name: deployments-loggregator
      params:
        BOSH_ENV: 10.0.0.6
        BOSH_USERNAME: {{bosh-username}}
        BOSH_PASSWORD: {{bosh-password}}
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash

          set -ex

          cd gcp-stemcell

          bosh -n alias-env coconut -e $BOSH_ENV --ca-cert ../deployments-loggregator/gcp/certs/bosh/ca.pem
          bosh -n -e coconut log-in --client=$BOSH_USERNAME --client-secret=$BOSH_PASSWORD

          for stemcell in $(find . -name '*.tgz')
          do
            bosh -e coconut upload-stemcell $stemcell
          done

- name: cf-deploy
  serial: true
  serial_groups:
  - bosh-cf-cats
  plan:
  - aggregate:
    - get: loggregator
      resource: loggregator-develop
      trigger: true
      passed:
      - run-tests
      - run-windows-tests
    - get: cf-deployment
      trigger: true
    - get: deployments-loggregator
      trigger: false
  - task: build-dev-release
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      inputs:
      - name: loggregator
      - name: deployments-loggregator
      params:
        BOSH_ENV: 10.0.0.6
        BOSH_USERNAME: {{bosh-username}}
        BOSH_PASSWORD: {{bosh-password}}
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          cd loggregator

          bosh -n create-release
          bosh -n alias-env coconut -e $BOSH_ENV --ca-cert ../deployments-loggregator/gcp/certs/bosh/ca.pem
          bosh -n -e coconut log-in --client=$BOSH_USERNAME --client-secret=$BOSH_PASSWORD
          bosh -n -e coconut upload-release --rebase
  - task: set-cloud-config
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      inputs:
      - name: deployments-loggregator
      params:
        BOSH_ENV: 10.0.0.6
        BOSH_USERNAME: {{bosh-username}}
        BOSH_PASSWORD: {{bosh-password}}
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          cd deployments-loggregator/gcp/coconut

          bosh -n alias-env coconut -e $BOSH_ENV --ca-cert ../certs/bosh/ca.pem
          bosh -n -e coconut log-in --client=$BOSH_USERNAME --client-secret=$BOSH_PASSWORD
          bosh -n -e coconut update-cloud-config cloud-config.yml
  - task: deploy-cf
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      inputs:
      - name: cf-deployment
      - name: deployments-loggregator
      outputs:
      - name: updated-deployments-loggregator
      params:
        BOSH_ENV: 10.0.0.6
        BOSH_USERNAME: {{bosh-username}}
        BOSH_PASSWORD: {{bosh-password}}
        SYSTEM_DOMAIN: "coconut.cf-app.com"
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          pushd cf-deployment

          bosh -n alias-env coconut -e $BOSH_ENV --ca-cert ../deployments-loggregator/gcp/certs/bosh/ca.pem
          bosh -n -e coconut log-in --client=$BOSH_USERNAME --client-secret=$BOSH_PASSWORD
          export DEPLOYMENT=../deployments-loggregator/gcp/coconut
          bosh -n -e coconut -d cf deploy cf-deployment.yml \
            -o operations/tcp-routing-gcp.yml \
            -o operations/windows-cell.yml \
            -o $DEPLOYMENT/cf-ops.yml \
            -v system_domain=$SYSTEM_DOMAIN \
            --vars-store $DEPLOYMENT/cf-vars.yml \
            --vars-file $DEPLOYMENT/router-vars.yml
          popd

          rsync -ac deployments-loggregator/ updated-deployments-loggregator
  - task: commit
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/ubuntu-base
      inputs:
      - name: updated-deployments-loggregator
      outputs:
      - name: committed-deployments-loggregator
      params:
        SOURCE: updated-deployments-loggregator
        PATHS: gcp/coconut/cf-vars.yml
        COMMIT_MESSAGE: "Update cf vars store"
        OUTPUT: committed-deployments-loggregator
      run:
        path: bash
        args:
        - -c
        - {{commit}}
  - put: deployments-loggregator-with-changes
    params:
      repository: committed-deployments-loggregator

- name: cf-release-deploy
  serial: true
  serial_groups:
  - cf-release
  plan:
  - aggregate:
    - get: loggregator
      resource: loggregator-develop
      trigger: true
      passed:
      - run-tests
      - run-windows-tests
    - get: cf-release
      trigger: false
    - get: diego-github-releases
      trigger: false
    - get: diego-release
      trigger: false
    - get: deployments-loggregator
      trigger: false

  - task: cf-and-diego-deploy
    privileged: true
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh10
      inputs:
      - name: loggregator
      - name: cf-release
      - name: diego-release
      - name: diego-github-releases
      - name: deployments-loggregator
      outputs:
      - name: cf-manifest
      params:
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          workspace=$(pwd)

          password=$(cat deployments-loggregator/gcp/lite/creds.yml |
            grep admin_password |
            awk '{print $2}')
          bosh -u admin -p "$password" target 10.100.0.6 lite
          bosh login admin "$password"

          pushd cf-release
            rm -r src/loggregator
            ln -s $workspace/loggregator src/
            bosh --parallel 10 sync blobs

            bosh -n create release --name cf --force
            bosh -n upload release --rebase
            ./scripts/generate-bosh-lite-dev-manifest
            bosh -n deploy
          popd

          for release in $(find diego-github-releases -name '*.tgz')
          do
            bosh -n upload release $release
          done

          pushd diego-release
            ./scripts/generate-bosh-lite-manifests
            bosh -n deployment bosh-lite/deployments/diego.yml
            bosh -n deploy
          popd

- name: cf-release-cats
  serial: true
  serial_groups:
  - cf-release
  plan:
  - aggregate:
    - get: loggregator-develop
      trigger: true
      passed:
      - cf-release-deploy
    - get: deployments-loggregator
      trigger: false

  - task: run-cats
    privileged: true
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh10
      inputs:
      - name: deployments-loggregator
      params:
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          workspace=$(pwd)

          password=$(cat deployments-loggregator/gcp/lite/creds.yml |
            grep admin_password |
            awk '{print $2}')
          bosh -u admin -p "$password" target 10.100.0.6 lite
          bosh login admin "$password"

          bosh download manifest cf-warden ./cf.yml

          bosh -d ./cf.yml run errand acceptance_tests


- name: loggregator-deploy
  serial: true
  serial_groups:
  - bosh-loggregator
  plan:
  - aggregate:
    - get: consul-release
      trigger: false
    - get: etcd-release
      trigger: false
    - get: loggregator
      resource: loggregator-develop
      passed:
      - run-tests
      - run-windows-tests
      trigger: true
    - get: deployments-loggregator
      trigger: false
  - task: upload-loggregator
    config:
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      platform: linux
      inputs:
        - name: deployments-loggregator
        - name: consul-release
        - name: etcd-release
        - name: loggregator
      params:
        BOSH_ENV: 10.0.0.6
        BOSH_USERNAME: {{bosh-username}}
        BOSH_PASSWORD: {{bosh-password}}
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -eux
            loggregator_dir="$PWD/loggregator"
            bosh -n alias-env coconut -e "$BOSH_ENV" --ca-cert "$PWD/deployments-loggregator/gcp/certs/bosh/ca.pem"
            bosh -e coconut -n log-in --client="$BOSH_USERNAME" --client-secret="$BOSH_PASSWORD"

            for release in $(find consul-release -name '*.tgz')
            do
              bosh -e coconut upload-release $release
            done

            for release in $(find etcd-release -name '*.tgz')
            do
              bosh -e coconut upload-release $release
            done


            pushd $loggregator_dir
                bosh create-release --name=loggregator --force
                bosh -e coconut upload-release --rebase
            popd
  - task: deploy-loggregator
    config:
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      platform: linux
      inputs:
      - name: deployments-loggregator
      - name: loggregator
      outputs:
      - name: updated-deployments-loggregator
      params:
        DEPLOYMENT_NAME: gcp/coconut
        BOSH_ENV: 10.0.0.6
        BOSH_USERNAME: {{bosh-username}}
        BOSH_PASSWORD: {{bosh-password}}
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -eux

            loggregator_dir="$PWD/loggregator"
            deployment_dir="$PWD/deployments-loggregator/$DEPLOYMENT_NAME"

            bosh -n alias-env coconut -e "$BOSH_ENV" --ca-cert "$PWD/deployments-loggregator/gcp/certs/bosh/ca.pem"
            bosh -e coconut -n log-in --client="$BOSH_USERNAME" --client-secret="$BOSH_PASSWORD"
            bosh -n -e coconut -d loggregator deploy \
              --vars-store "$deployment_dir/loggregator-vars.yml" \
              --ops-file "$deployment_dir/loggregator-ops.yml" \
              "$loggregator_dir/templates/loggregator.yml"

            rsync -ac deployments-loggregator/ updated-deployments-loggregator
  - task: commit
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/ubuntu-base
      inputs:
      - name: updated-deployments-loggregator
      outputs:
      - name: committed-deployments-loggregator
      params:
        SOURCE: updated-deployments-loggregator
        PATHS: gcp/coconut/loggregator-vars.yml
        COMMIT_MESSAGE: "Update loggregator vars store"
        OUTPUT: committed-deployments-loggregator
      run:
        path: bash
        args:
        - -c
        - {{commit}}
  - put: deployments-loggregator-with-changes
    params:
      repository: committed-deployments-loggregator
      rebase: true

- name: cats
  serial: true
  serial_groups:
  - bosh-cf-cats
  plan:
  - aggregate:
    - get: cats
      trigger: true
    - get: loggregator-develop
      trigger: true
      passed:
      - cf-deploy
    - get: deployments-loggregator-with-changes
      trigger: false

  - task: run-cats
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      inputs:
      - name: cats
      - name: deployments-loggregator-with-changes
      params:
        NODES: 1
        CONFIG_DATA: |
          {
            "api": "api.coconut.cf-app.com",
            "admin_user": "admin",
            "admin_password": "CF_PASSWORD_FROM_VARS",
            "apps_domain": "coconut.cf-app.com",
            "skip_ssl_validation": true,
            "default_timeout": 120,
            "use_http": true,
            "backend": "diego",
            "include_apps": true,
            "include_backend_compatibility": false,
            "include_detect": false,
            "include_docker": false,
            "include_ssh": false,
            "include_internet_dependent": true,
            "include_privileged_container_support": false,
            "include_route_services": false,
            "include_routing": true,
            "include_security_groups": false,
            "include_container_networking": true,
            "include_services": false,
            "include_sso": true,
            "include_zipkin": false,
            "include_tasks": false,
            "include_v3": false
          }
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          export CONFIG="$PWD/config.json"
          echo "$CONFIG_DATA" > $CONFIG

          # Insert admin password from cf-vars.yml
          pushd deployments-loggregator-with-changes
            export CF_PASSWORD_VARS=$(bosh interpolate gcp/coconut/cf-vars.yml --path /uaa_scim_users_admin_password)
            sed -i "s/CF_PASSWORD_FROM_VARS/$CF_PASSWORD_VARS/" $CONFIG
          popd


          export GOPATH="$PWD/tests"

          CATS_PATH=$GOPATH/src/github.com/cloudfoundry/cf-acceptance-tests
          mkdir -p $(dirname $CATS_PATH)
          cp -r $PWD/cats $CATS_PATH
          cd $CATS_PATH

          ./bin/test \
          -keepGoing \
          -randomizeAllSpecs \
          -skipPackage=helpers \
          -slowSpecThreshold=120 \
          -nodes="${NODES}"

- name: lats
  serial: true
  serial_groups:
  - bosh-loggregator
  plan:
  - aggregate:
    - get: loggregator
      resource: loggregator-develop
      passed:
      - loggregator-deploy
      trigger: true
    - get: deployments-loggregator
      trigger: false
  - task: run-lats
    config:
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      platform: linux
      inputs:
        - name: deployments-loggregator
      params:
        BOSH_ENV: 10.0.0.6
        BOSH_USERNAME: {{bosh-username}}
        BOSH_PASSWORD: {{bosh-password}}
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -eux
            bosh -n alias-env coconut -e "$BOSH_ENV" --ca-cert "$PWD/deployments-loggregator/gcp/certs/bosh/ca.pem"
            bosh -e coconut -n log-in --client="$BOSH_USERNAME" --client-secret="$BOSH_PASSWORD"
            bosh -e coconut -d loggregator run-errand loggregator-acceptance-tests --keep-alive

- name: wats
  serial: true
  serial_groups:
  - bosh-cf-cats
  plan:
  - aggregate:
    - get: wats
      trigger: true
    - get: loggregator-develop
      trigger: true
      passed:
      - cats
    - get: deployments-loggregator-with-changes
      trigger: false
  - task: run-wats
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      inputs:
      - name: wats
      - name: deployments-loggregator-with-changes
      params:
        ADMIN_USER: "admin"
        API: "api.coconut.cf-app.com"
        APPS_DOMAIN: "coconut.cf-app.com"
        NUM_WIN_CELLS: 1
        SOCKET_ADDRESS_FOR_SECURITY_GROUP_TEST: 10.0.0.6:25555
        DOPPLER_URL: wss://doppler.coconut.cf-app.com:443
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -eux

            pushd deployments-loggregator-with-changes
              export ADMIN_PASSWORD=$(bosh interpolate gcp/coconut/cf-vars.yml --path /uaa_scim_users_admin_password)
            popd

            ./wats/scripts/run_wats.sh

- name: promotion
  serial: true
  plan:
  - aggregate:
    - get: loggregator-release-elect
      trigger: false
    - get: loggregator
      resource: loggregator-develop
      trigger: true
      passed:
      - lats
      - cf-release-cats
  - task: promote
    config:
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      platform: linux
      inputs:
          - name: loggregator
          - name: loggregator-release-elect
      outputs:
          - name: promote-develop
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash -ex
            mkdir -p ~/.ssh/
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            pushd loggregator
              git checkout -b merge-branch
            popd
            pushd loggregator-release-elect
              git remote add -f develop-repo ../loggregator
              git checkout release-elect
              git merge -v "develop-repo/merge-branch" -m "Merging develop into release-elect"
            popd
            rsync -ac loggregator-release-elect/ promote-develop/
  - put: loggregator-release-elect
    params:
      repository: promote-develop
      rebase: false

- name: diff-cert-generation-scripts
  plan:
  - get: loggregator
    resource: loggregator-develop
    trigger: true
  - get: cf-release
    resource: cf-release-develop
    trigger: true
  - task: diff
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/ubuntu-base
      inputs:
      - name: loggregator
      - name: cf-release
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -e
            echo diffing loggregator cert generation
            diff --unified loggregator/scripts/generate-loggregator-certs \
                           cf-release/scripts/generate-loggregator-certs
