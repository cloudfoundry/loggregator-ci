resources:
- name: 15m
  type: time
  source: {interval: 15m}

- name: cats
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-acceptance-tests
    branch: master

- name: cf-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment
    branch: develop

- name: consul-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/consul-release

- name: cf-release
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-release
    branch: develop

- name: cf-release-develop
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-release
    branch: develop

- name: diego-release
  type: git
  source:
    uri: https://github.com/cloudfoundry/diego-release
    branch: master

- name: diego-github-releases
  type: github-release
  source:
    user: cloudfoundry
    repository: diego-release
    access_token: {{access-token}}

- name: deployments-loggregator
  type: git
  source: &deployments_loggregator
    uri: git@github.com:cloudfoundry/deployments-loggregator.git
    branch: master
    private_key: {{deployments-loggregator-key}}

- name: cf-deployment-concourse-tasks
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks
    branch: v3.1

# This is here because concourse has a bug in which putting to a git resource
# creates a new version that can trigger jobs even if the commit has [ci skip]
# present.
- name: deployments-loggregator-with-changes
  type: git
  source: *deployments_loggregator

- name: etcd-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/etcd-release

- name: loggregator-develop
  type: git
  source: &loggregator_develop
    uri: git@github.com:cloudfoundry/loggregator.git
    branch: develop
    private_key: {{loggregator-key}}
    ignore_paths:
    - .final_builds
    - releases

- name: loggregator-release-elect
  type: git
  source:
    uri: git@github.com:cloudfoundry/loggregator.git
    branch: release-elect
    private_key: {{loggregator-key}}
    ignore_paths:
    - .final_builds
    - releases

- name: loggregator-ci
  type: git
  source:
    uri: git@github.com:cloudfoundry/loggregator-ci
    branch: master
    private_key: {{cf-loggregator-oauth-bot-key}}

jobs:
- name: run-tests
  serial: true
  public: true
  plan:
  - get: 15m
    trigger: true
  - get: loggregator
    resource: loggregator-develop
    trigger: true
  - task: run-tests
    timeout: 10m
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/go18
      inputs:
      - name: loggregator
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          cd loggregator

          export GOPATH=`pwd`
          export TERM=xterm

          go version
          go install github.com/onsi/ginkgo/ginkgo

          scripts/test

- name: run-windows-tests
  public: true
  serial: true
  plan:
  - get: loggregator
    resource: loggregator-develop
    trigger: true
  - task: build-windows-test-binary
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/go18
      inputs:
      - name: loggregator
      outputs:
      - name: binaries
      - name: test-binaries
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          cd loggregator
          export GOPATH=$PWD
          export GOOS=windows
          function munge {
            echo $1 | tr '/' '_'
          }
          for pkg in $(go list metron/...); do
            go test -c -o ../test-binaries/$(munge $pkg)_test.exe $pkg
          done
          go build -o ../binaries/metron.exe metron
  - task: run-windows-tests
    config:
      platform: windows
      inputs:
      - name: binaries
      - name: test-binaries
      run:
        path: powershell
        args:
        - "-command"
        - |
          trap {
            write-error $_
            exit 1
          }

          $env:SKIP_BUILD = "true"
          $env:METRON_BUILD_PATH = "binaries\metron.exe"

          # Run all test binaries
          Get-ChildItem -Filter test-binaries\*.exe | ForEach {
            &$_.Fullname /s
            if ($LastExitCode -ne 0) {
              throw "test failed"
            }
          }

- name: cf-deploy
  serial: true
  serial_groups:
  - bosh-cf-cats
  plan:
  - aggregate:
    - get: bbl-state
      resource: deployments-loggregator
      trigger: false
    - get: cf-deployment
      trigger: true
    - get: cf-deployment-concourse-tasks
      trigger: false
    - get: release
      resource: loggregator-develop
      trigger: true
      passed:
      - run-tests
      - run-windows-tests
    - get: vars-store
      resource: deployments-loggregator
      trigger: false
    - get: vars-files
      resource: deployments-loggregator
  - task: upload-stemcell
    file: cf-deployment-concourse-tasks/bosh-upload-stemcell-from-cf-deployment/task.yml
    params:
      BBL_STATE_DIR: gcp/bbl
  - task: copy-ops-files
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: { repository: ubuntu }
      inputs:
      - name: bbl-state
      - name: cf-deployment
      outputs:
      - name: ops-files
      run:
        path: /bin/bash
        args:
        - "-c"
        - |
          cp cf-deployment/operations/workarounds/use-4-azs-for-router.yml ops-files/
          cp cf-deployment/operations/tcp-routing-gcp.yml ops-files/
          cp cf-deployment/operations/scale-to-one-az.yml ops-files/
          cp bbl-state/gcp/bbl/ops-files/*.yml ops-files/

  - task: cf-deploy
    file: cf-deployment-concourse-tasks/bosh-deploy-with-created-release/task.yml
    params:
      BBL_STATE_DIR: gcp/bbl
      SYSTEM_DOMAIN: coconut.cf-app.com
      VARS_STORE_FILE: gcp/bbl/deployment-vars.yml
      OPS_FILES: "clients.yml use-4-azs-for-router.yml rlp.yml tcp-routing-gcp.yml datadog-agent.yml diego.yml scale-to-one-az.yml"
      VARS_FILES: "gcp/bbl/vars-files/router.yml"
  - put: deployments-loggregator-with-changes
    params:
      repository: updated-vars-store
      rebase: true

- name: cf-release-deploy
  serial: true
  serial_groups:
  - cf-release
  plan:
  - aggregate:
    - get: loggregator
      resource: loggregator-develop
      trigger: true
      passed:
      - run-tests
      - run-windows-tests
    - get: cf-release
      trigger: false
    - get: diego-github-releases
      trigger: false
    - get: diego-release
      trigger: false
    - get: deployments-loggregator
      trigger: false

  - task: cf-and-diego-deploy
    privileged: true
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh10
      inputs:
      - name: loggregator
      - name: cf-release
      - name: diego-release
      - name: diego-github-releases
      - name: deployments-loggregator
      outputs:
      - name: cf-manifest
      params:
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          workspace=$(pwd)

          password=$(cat deployments-loggregator/gcp/loggregator-lite/creds.yml |
            grep admin_password |
            awk '{print $2}')
          bosh -u admin -p "$password" target 10.100.0.6 lite
          bosh login admin "$password"

          pushd cf-release
            rm -r src/loggregator
            ln -s $workspace/loggregator src/
            bosh --parallel 10 sync blobs

            bosh -n create release --name cf --force
            bosh -n upload release --rebase
            ./scripts/generate-bosh-lite-dev-manifest $workspace/deployments-loggregator/gcp/loggregator-lite/runner.yml
            bosh -n deploy
          popd

          for release in $(find diego-github-releases -name '*.tgz')
          do
            bosh -n upload release $release
          done

          pushd diego-release
            ./scripts/generate-bosh-lite-manifests -r
            bosh -n deployment bosh-lite/deployments/diego.yml
            bosh -n deploy
          popd

- name: cf-release-cats
  serial: true
  serial_groups:
  - cf-release
  plan:
  - aggregate:
    - get: loggregator-develop
      trigger: true
      passed:
      - cf-release-deploy
    - get: deployments-loggregator
      trigger: false

  - task: run-cats
    privileged: true
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh10
      inputs:
      - name: deployments-loggregator
      params:
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          workspace=$(pwd)

          password=$(cat deployments-loggregator/gcp/loggregator-lite/creds.yml |
            grep admin_password |
            awk '{print $2}')
          bosh -u admin -p "$password" target 10.100.0.6 lite
          bosh login admin "$password"

          bosh download manifest cf-warden ./cf.yml

          bosh -d ./cf.yml run errand acceptance_tests


- name: loggregator-deploy
  serial: true
  serial_groups:
  - bosh-loggregator
  plan:
  - aggregate:
    - get: consul-release
      trigger: false
    - get: etcd-release
      trigger: false
    - get: loggregator
      resource: loggregator-develop
      passed:
      - run-tests
      - run-windows-tests
      trigger: true
    - get: deployments-loggregator
      trigger: false
  - task: upload-loggregator
    config:
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
      platform: linux
      inputs:
        - name: deployments-loggregator
        - name: consul-release
        - name: etcd-release
        - name: loggregator
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -eux
            loggregator_dir="$PWD/loggregator"

            pushd deployments-loggregator/gcp/bbl
              export BOSH_CLIENT=`bbl director-username`
              export BOSH_CLIENT_SECRET=`bbl director-password`
              export BOSH_CA_CERT=`bbl director-ca-cert`
              export BOSH_ENVIRONMENT=`bbl director-address`
            popd

            for release in $(find consul-release -name '*.tgz')
            do
              bosh upload-release $release
            done

            for release in $(find etcd-release -name '*.tgz')
            do
              bosh upload-release $release
            done


            pushd $loggregator_dir
                bosh create-release --name=loggregator --force
                bosh upload-release --rebase
            popd
  - task: deploy-loggregator
    config:
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
      platform: linux
      inputs:
      - name: deployments-loggregator
      - name: loggregator
      outputs:
      - name: updated-deployments-loggregator
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -eux

            loggregator_dir="$PWD/loggregator"
            deployment_dir="$PWD/deployments-loggregator/gcp/coconut"

            pushd deployments-loggregator/gcp/bbl
              export BOSH_CLIENT=`bbl director-username`
              export BOSH_CLIENT_SECRET=`bbl director-password`
              export BOSH_CA_CERT=`bbl director-ca-cert`
              export BOSH_ENVIRONMENT=`bbl director-address`
            popd

            bosh -n -d loggregator deploy \
              --vars-store "$deployment_dir/loggregator-vars.yml" \
              "$loggregator_dir/templates/loggregator.yml"

            rsync -ac deployments-loggregator/ updated-deployments-loggregator
  - task: commit
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/ubuntu-base
      inputs:
      - name: updated-deployments-loggregator
      outputs:
      - name: committed-deployments-loggregator
      params:
        SOURCE: updated-deployments-loggregator
        PATHS: gcp/coconut/loggregator-vars.yml
        COMMIT_MESSAGE: "Update loggregator vars store"
        OUTPUT: committed-deployments-loggregator
      run:
        path: bash
        args:
        - -c
        - {{commit}}
  - put: deployments-loggregator-with-changes
    params:
      repository: committed-deployments-loggregator
      rebase: true

- name: cats
  serial: true
  serial_groups:
  - bosh-cf-cats
  plan:
  - aggregate:
    - get: cats
      trigger: true
    - get: loggregator-develop
      trigger: true
      passed:
      - cf-deploy
    - get: deployments-loggregator-with-changes
      trigger: false

  - task: run-cats
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      inputs:
      - name: cats
      - name: deployments-loggregator-with-changes
      params:
        NODES: 1
        CONFIG_DATA: |
          {
            "api": "api.coconut.cf-app.com",
            "admin_user": "admin",
            "admin_password": "CF_PASSWORD_FROM_VARS",
            "apps_domain": "coconut.cf-app.com",
            "skip_ssl_validation": true,
            "default_timeout": 120,
            "use_http": true,
            "backend": "diego",
            "include_apps": true,
            "include_backend_compatibility": false,
            "include_detect": false,
            "include_docker": false,
            "include_ssh": false,
            "include_internet_dependent": true,
            "include_privileged_container_support": false,
            "include_route_services": false,
            "include_routing": true,
            "include_security_groups": false,
            "include_container_networking": true,
            "include_services": false,
            "include_sso": true,
            "include_zipkin": false,
            "include_tasks": false,
            "include_v3": false
          }
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          export CONFIG="$PWD/config.json"
          echo "$CONFIG_DATA" > $CONFIG

          pushd deployments-loggregator-with-changes
            export CF_PASSWORD_VARS=$(bosh interpolate gcp/bbl/deployment-vars.yml --path /cf_admin_password)
            sed -i "s/CF_PASSWORD_FROM_VARS/$CF_PASSWORD_VARS/" $CONFIG
          popd


          export GOPATH="$PWD/tests"

          CATS_PATH=$GOPATH/src/github.com/cloudfoundry/cf-acceptance-tests
          mkdir -p $(dirname $CATS_PATH)
          cp -r $PWD/cats $CATS_PATH
          cd $CATS_PATH

          ./bin/test \
          -keepGoing \
          -randomizeAllSpecs \
          -skipPackage=helpers \
          -slowSpecThreshold=120 \
          -nodes="${NODES}"

- name: lats
  serial: true
  serial_groups:
  - bosh-loggregator
  plan:
  - aggregate:
    - get: loggregator
      resource: loggregator-develop
      passed:
      - loggregator-deploy
      trigger: true
    - get: deployments-loggregator
      trigger: false
  - task: run-lats
    config:
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
      platform: linux
      inputs:
        - name: deployments-loggregator
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -eux

            pushd deployments-loggregator/gcp/bbl
              export BOSH_CLIENT=`bbl director-username`
              export BOSH_CLIENT_SECRET=`bbl director-password`
              export BOSH_CA_CERT=`bbl director-ca-cert`
              export BOSH_ENVIRONMENT=`bbl director-address`
            popd

            bosh -d loggregator run-errand loggregator-acceptance-tests --keep-alive


- name: promotion
  serial: true
  plan:
  - aggregate:
    - get: release-elect
      resource: loggregator-release-elect
      trigger: false
    - get: develop
      resource: loggregator-develop
      trigger: true
      passed: ["lats", "cf-release-cats"]
    - get: loggregator-ci
  - task: promote
    file: loggregator-ci/tasks/promote.yml
  - put: loggregator-release-elect
    params:
      repository: promote-develop
      rebase: false

- name: diff-cert-generation-scripts
  plan:
  - get: loggregator
    resource: loggregator-develop
    trigger: true
  - get: cf-release
    resource: cf-release-develop
    trigger: true
  - task: diff
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/ubuntu-base
      inputs:
      - name: loggregator
      - name: cf-release
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -e
            echo diffing loggregator cert generation
            diff --unified loggregator/scripts/generate-loggregator-certs \
                           cf-release/scripts/generate-loggregator-certs
