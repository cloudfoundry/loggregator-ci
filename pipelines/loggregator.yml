resources:
- name: wats
  type: git
  source:
    uri: https://github.com/cloudfoundry/wats
    branch: master

- name: cats
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-acceptance-tests
    branch: master

- name: cf-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment
    branch: develop

- name: consul-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/consul-release

- name: cf-release
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-release
    branch: release-candidate

- name: cf-release-develop
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-release
    branch: develop

- name: diego-release
  type: git
  source:
    uri: https://github.com/cloudfoundry/diego-release
    branch: master

- name: diego-github-releases
  type: github-release
  source:
    user: cloudfoundry
    repository: diego-release
    access_token: {{access-token}}

- name: deployments-loggregator
  type: git
  source: &deployments_loggregator
    uri: git@github.com:cloudfoundry/deployments-loggregator.git
    branch: master
    private_key: {{deployments-loggregator-key}}

# This is here because concourse has a bug in which putting to a git resource
# creates a new version that can trigger jobs even if the commit has [ci skip]
# present.
- name: deployments-loggregator-with-changes
  type: git
  source: *deployments_loggregator

- name: etcd-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/etcd-release

- name: gcp-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-trusty-go_agent

- name: loggregator-develop
  type: git
  source: &loggregator_develop
    uri: git@github.com:cloudfoundry/loggregator.git
    branch: develop
    private_key: {{loggregator-key}}
    ignore_paths:
    - .final_builds
    - releases

- name: loggregator-master
  type: git
  source:
    disable_ci_skip: true
    uri: git@github.com:cloudfoundry/loggregator.git
    branch: master
    private_key: {{loggregator-key}}
    ignore_paths:
    - .final_builds
    - releases

- name: loggregator-final-release-develop
  type: git
  source:
    uri: git@github.com:cloudfoundry/loggregator.git
    branch: develop
    private_key: {{loggregator-key}}
    ignore_paths:
    - .final_builds
    - releases

- name: loggregator-final-release-master
  type: git
  source:
    uri: git@github.com:cloudfoundry/loggregator.git
    branch: master
    private_key: {{loggregator-key}}
    ignore_paths:
    - .final_builds
    - releases

- name: loggregator-github-release-drafts
  type: github-release
  source:
    user: cloudfoundry
    repository: loggregator
    access_token: {{access-token}}
    drafts: true

- name: loggregator-release-elect
  type: git
  source:
    uri: git@github.com:cloudfoundry/loggregator.git
    branch: release-elect
    private_key: {{loggregator-key}}
    ignore_paths:
    - .final_builds
    - releases

- name: dropsonde-protocol
  type: git
  source:
    uri: https://github.com/cloudfoundry/dropsonde-protocol.git
    branch: master

- name: dropsonde
  type: git
  source:
    uri: https://github.com/cloudfoundry/dropsonde.git
    branch: master

- name: noaa
  type: git
  source:
    uri: https://github.com/cloudfoundry/noaa.git
    branch: master

- name: sonde-go
  type: git
  source:
    uri: git@github.com:cloudfoundry/sonde-go.git
    branch: master
    private_key: {{sonde-go-key}}

- name: bosh-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry/bosh-deployment
    branch: master

jobs:
- name: run-tests
  public: true
  plan:
  - get: loggregator
    resource: loggregator-develop
    trigger: true
  - task: run-tests
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/go17
      inputs:
      - name: loggregator
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          cd loggregator

          export GOPATH=`pwd`
          export TERM=xterm

          go version
          go install github.com/onsi/ginkgo/ginkgo
          go get github.com/mattn/goveralls

          scripts/test

- name: run-windows-tests
  public: true
  serial: true
  plan:
  - get: loggregator
    resource: loggregator-develop
    trigger: true
  - task: build-windows-test-binary
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/go17
      inputs:
      - name: loggregator
      outputs:
      - name: binaries
      - name: test-binaries
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          cd loggregator
          export GOPATH=$PWD
          export GOOS=windows
          function munge {
            echo $1 | tr '/' '_'
          }
          for pkg in $(go list metron/...); do
            go test -c -o ../test-binaries/$(munge $pkg)_test.exe $pkg
          done
          go build -o ../binaries/metron.exe metron
  - task: run-windows-tests
    config:
      platform: windows
      inputs:
      - name: binaries
      - name: test-binaries
      run:
        path: powershell
        args:
        - "-command"
        - |
          trap {
            write-error $_
            exit 1
          }

          $env:SKIP_BUILD = "true"
          $env:METRON_BUILD_PATH = "binaries\metron.exe"

          # Run all test binaries
          Get-ChildItem -Filter test-binaries\*.exe | ForEach {
            &$_.Fullname /s
            if ($LastExitCode -ne 0) {
              throw "test failed"
            }
          }

- name: upload-stemcell
  plan:
  - aggregate:
    - get: gcp-stemcell
      trigger: true
    - get: deployments-loggregator
  - task: load-stemcell
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      inputs:
      - name: gcp-stemcell
      - name: deployments-loggregator
      params:
        BOSH_ENV: 10.0.0.6
        BOSH_USERNAME: {{bosh-username}}
        BOSH_PASSWORD: {{bosh-password}}
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash

          set -ex

          cd gcp-stemcell

          bosh -n alias-env coconut -e $BOSH_ENV --ca-cert ../deployments-loggregator/gcp/certs/bosh/ca.pem
          bosh -n -e coconut log-in --client=$BOSH_USERNAME --client-secret=$BOSH_PASSWORD

          for stemcell in $(find . -name '*.tgz')
          do
            bosh -e coconut upload-stemcell $stemcell
          done

- name: cf-deploy
  serial: true
  serial_groups:
  - bosh-cf-cats
  plan:
  - aggregate:
    - get: loggregator
      resource: loggregator-develop
      trigger: true
      passed:
      - run-tests
      - run-windows-tests
    - get: cf-deployment
      trigger: true
    - get: deployments-loggregator
      trigger: false
  - task: build-dev-release
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      inputs:
      - name: loggregator
      - name: deployments-loggregator
      params:
        BOSH_ENV: 10.0.0.6
        BOSH_USERNAME: {{bosh-username}}
        BOSH_PASSWORD: {{bosh-password}}
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          cd loggregator

          bosh -n create-release
          bosh -n alias-env coconut -e $BOSH_ENV --ca-cert ../deployments-loggregator/gcp/certs/bosh/ca.pem
          bosh -n -e coconut log-in --client=$BOSH_USERNAME --client-secret=$BOSH_PASSWORD
          bosh -n -e coconut upload-release --rebase
  - task: set-cloud-config
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      inputs:
      - name: deployments-loggregator
      params:
        BOSH_ENV: 10.0.0.6
        BOSH_USERNAME: {{bosh-username}}
        BOSH_PASSWORD: {{bosh-password}}
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          cd deployments-loggregator/gcp/coconut

          bosh -n alias-env coconut -e $BOSH_ENV --ca-cert ../certs/bosh/ca.pem
          bosh -n -e coconut log-in --client=$BOSH_USERNAME --client-secret=$BOSH_PASSWORD
          bosh -n -e coconut update-cloud-config cloud-config.yml
  - task: deploy-cf
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      inputs:
      - name: cf-deployment
      - name: deployments-loggregator
      outputs:
      - name: updated-deployments-loggregator
      params:
        BOSH_ENV: 10.0.0.6
        BOSH_USERNAME: {{bosh-username}}
        BOSH_PASSWORD: {{bosh-password}}
        SYSTEM_DOMAIN: "coconut.cf-app.com"
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          pushd cf-deployment

          bosh -n alias-env coconut -e $BOSH_ENV --ca-cert ../deployments-loggregator/gcp/certs/bosh/ca.pem
          bosh -n -e coconut log-in --client=$BOSH_USERNAME --client-secret=$BOSH_PASSWORD
          export DEPLOYMENT=../deployments-loggregator/gcp/coconut
          # TODO: remove skip-drain in a few weeks once issues are resolved
          # with consul_agent_windows
          bosh -n -e coconut -d cf deploy cf-deployment.yml \
            -o operations/tcp-routing-gcp.yml \
            -o operations/windows-cell.yml \
            -o $DEPLOYMENT/cf-ops.yml \
            -v system_domain=$SYSTEM_DOMAIN \
            --vars-store $DEPLOYMENT/cf-vars.yml \
            --vars-file $DEPLOYMENT/router-vars.yml \
            --skip-drain=windows-cell
          popd

          rsync -ac deployments-loggregator/ updated-deployments-loggregator
  - task: commit
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/ubuntu-base
      inputs:
      - name: updated-deployments-loggregator
      outputs:
      - name: committed-deployments-loggregator
      params:
        SOURCE: updated-deployments-loggregator
        PATHS: gcp/coconut/cf-vars.yml
        COMMIT_MESSAGE: "Update cf vars store"
        OUTPUT: committed-deployments-loggregator
      run:
        path: bash
        args:
        - -c
        - {{commit}}
  - put: deployments-loggregator-with-changes
    params:
      repository: committed-deployments-loggregator

- name: cf-release-deploy
  serial: true
  serial_groups:
  - cf-release
  plan:
  - aggregate:
    - get: loggregator
      resource: loggregator-develop
      trigger: true
      passed:
      - run-tests
      - run-windows-tests
    - get: cf-release
      trigger: false
    - get: diego-github-releases
      trigger: false
    - get: diego-release
      trigger: false
    - get: deployments-loggregator
      trigger: false

  - task: cf-and-diego-deploy
    privileged: true
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh10
      inputs:
      - name: loggregator
      - name: cf-release
      - name: diego-release
      - name: diego-github-releases
      - name: deployments-loggregator
      outputs:
      - name: cf-manifest
      params:
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          workspace=$(pwd)

          password=$(cat deployments-loggregator/gcp/lite/creds.yml |
            grep admin_password |
            awk '{print $2}')
          bosh -u admin -p "$password" target 10.100.0.6 lite
          bosh login admin "$password"

          pushd cf-release
            rm -r src/loggregator
            ln -s $workspace/loggregator src/
            bosh --parallel 10 sync blobs

            bosh -n create release --name cf --force
            bosh -n upload release --rebase
            ./scripts/generate-bosh-lite-dev-manifest
            bosh -n deploy
          popd

          for release in $(find diego-github-releases -name '*.tgz')
          do
            bosh -n upload release $release
          done

          pushd diego-release
            ./scripts/generate-bosh-lite-manifests
            bosh -n deployment bosh-lite/deployments/diego.yml
            bosh -n deploy
          popd

- name: cf-release-cats
  serial: true
  serial_groups:
  - cf-release
  plan:
  - aggregate:
    - get: loggregator-develop
      trigger: true
      passed:
      - cf-release-deploy
    - get: deployments-loggregator
      trigger: false

  - task: run-cats
    privileged: true
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh10
      inputs:
      - name: deployments-loggregator
      params:
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          workspace=$(pwd)

          password=$(cat deployments-loggregator/gcp/lite/creds.yml |
            grep admin_password |
            awk '{print $2}')
          bosh -u admin -p "$password" target 10.100.0.6 lite
          bosh login admin "$password"

          bosh download manifest cf-warden ./cf.yml

          bosh -d ./cf.yml run errand acceptance_tests


- name: loggregator-deploy
  serial: true
  serial_groups:
  - bosh-loggregator
  plan:
  - aggregate:
    - get: consul-release
      trigger: false
    - get: etcd-release
      trigger: false
    - get: loggregator
      resource: loggregator-develop
      passed:
      - run-tests
      - run-windows-tests
      trigger: true
    - get: deployments-loggregator
      trigger: false
  - task: upload-loggregator
    config:
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      platform: linux
      inputs:
        - name: deployments-loggregator
        - name: consul-release
        - name: etcd-release
        - name: loggregator
      params:
        BOSH_ENV: 10.0.0.6
        BOSH_USERNAME: {{bosh-username}}
        BOSH_PASSWORD: {{bosh-password}}
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -eux
            loggregator_dir="$PWD/loggregator"
            bosh -n alias-env coconut -e "$BOSH_ENV" --ca-cert "$PWD/deployments-loggregator/gcp/certs/bosh/ca.pem"
            bosh -e coconut -n log-in --client="$BOSH_USERNAME" --client-secret="$BOSH_PASSWORD"

            for release in $(find consul-release -name '*.tgz')
            do
              bosh -e coconut upload-release $release
            done

            for release in $(find etcd-release -name '*.tgz')
            do
              bosh -e coconut upload-release $release
            done


            pushd $loggregator_dir
                bosh create-release --name=loggregator --force
                bosh -e coconut upload-release --rebase
            popd
  - task: deploy-loggregator
    config:
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      platform: linux
      inputs:
      - name: deployments-loggregator
      - name: loggregator
      outputs:
      - name: updated-deployments-loggregator
      params:
        DEPLOYMENT_NAME: gcp/coconut
        BOSH_ENV: 10.0.0.6
        BOSH_USERNAME: {{bosh-username}}
        BOSH_PASSWORD: {{bosh-password}}
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -eux

            loggregator_dir="$PWD/loggregator"
            deployment_dir="$PWD/deployments-loggregator/$DEPLOYMENT_NAME"

            bosh -n alias-env coconut -e "$BOSH_ENV" --ca-cert "$PWD/deployments-loggregator/gcp/certs/bosh/ca.pem"
            bosh -e coconut -n log-in --client="$BOSH_USERNAME" --client-secret="$BOSH_PASSWORD"
            bosh -n -e coconut -d loggregator deploy \
              --vars-store "$deployment_dir/loggregator-vars.yml" \
              --ops-file "$deployment_dir/loggregator-ops.yml" \
              "$loggregator_dir/templates/loggregator.yml"

            rsync -ac deployments-loggregator/ updated-deployments-loggregator
  - task: commit
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/ubuntu-base
      inputs:
      - name: updated-deployments-loggregator
      outputs:
      - name: committed-deployments-loggregator
      params:
        SOURCE: updated-deployments-loggregator
        PATHS: gcp/coconut/loggregator-vars.yml
        COMMIT_MESSAGE: "Update loggregator vars store [ci skip]"
        OUTPUT: committed-deployments-loggregator
      run:
        path: bash
        args:
        - -c
        - {{commit}}
  - put: deployments-loggregator-with-changes
    params:
      repository: committed-deployments-loggregator

- name: cats
  serial: true
  serial_groups:
  - bosh-cf-cats
  plan:
  - aggregate:
    - get: cats
      trigger: true
    - get: loggregator-develop
      trigger: true
      passed:
      - cf-deploy
    - get: deployments-loggregator-with-changes
      trigger: false

  - task: run-cats
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      inputs:
      - name: cats
      - name: deployments-loggregator-with-changes
      params:
        NODES: 1
        CONFIG_DATA: |
          {
            "api": "api.coconut.cf-app.com",
            "admin_user": "admin",
            "admin_password": "CF_PASSWORD_FROM_VARS",
            "apps_domain": "coconut.cf-app.com",
            "skip_ssl_validation": true,
            "default_timeout": 120,
            "use_http": true,
            "backend": "diego",
            "include_apps": true,
            "include_backend_compatibility": false,
            "include_detect": false,
            "include_docker": false,
            "include_ssh": false,
            "include_internet_dependent": true,
            "include_privileged_container_support": false,
            "include_route_services": false,
            "include_routing": true,
            "include_security_groups": false,
            "include_container_networking": true,
            "include_services": false,
            "include_sso": true,
            "include_zipkin": false,
            "include_tasks": false,
            "include_v3": false
          }
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -ex

          export CONFIG="$PWD/config.json"
          echo "$CONFIG_DATA" > $CONFIG

          # Insert admin password from cf-vars.yml
          pushd deployments-loggregator-with-changes
            export CF_PASSWORD_VARS=$(bosh interpolate gcp/coconut/cf-vars.yml --path /uaa_scim_users_admin_password)
            sed -i "s/CF_PASSWORD_FROM_VARS/$CF_PASSWORD_VARS/" $CONFIG
          popd


          export GOPATH="$PWD/tests"

          CATS_PATH=$GOPATH/src/github.com/cloudfoundry/cf-acceptance-tests
          mkdir -p $(dirname $CATS_PATH)
          cp -r $PWD/cats $CATS_PATH
          cd $CATS_PATH

          ./bin/test \
          -keepGoing \
          -randomizeAllSpecs \
          -skipPackage=helpers \
          -slowSpecThreshold=120 \
          -nodes="${NODES}"

- name: lats
  serial: true
  serial_groups:
  - bosh-loggregator
  plan:
  - aggregate:
    - get: loggregator
      resource: loggregator-develop
      passed:
      - loggregator-deploy
      trigger: true
    - get: deployments-loggregator
      trigger: false
  - task: run-lats
    config:
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      platform: linux
      inputs:
        - name: deployments-loggregator
      params:
        BOSH_ENV: 10.0.0.6
        BOSH_USERNAME: {{bosh-username}}
        BOSH_PASSWORD: {{bosh-password}}
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -eux
            bosh -n alias-env coconut -e "$BOSH_ENV" --ca-cert "$PWD/deployments-loggregator/gcp/certs/bosh/ca.pem"
            bosh -e coconut -n log-in --client="$BOSH_USERNAME" --client-secret="$BOSH_PASSWORD"
            bosh -e coconut -d loggregator run-errand loggregator-acceptance-tests --keep-alive

- name: wats
  serial: true
  serial_groups:
  - bosh-cf-cats
  plan:
  - aggregate:
    - get: wats
      trigger: true
    - get: loggregator-develop
      trigger: true
      passed:
      - cats
    - get: deployments-loggregator-with-changes
      trigger: false
  - task: run-wats
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      inputs:
      - name: wats
      - name: deployments-loggregator-with-changes
      params:
        ADMIN_USER: "admin"
        API: "api.coconut.cf-app.com"
        APPS_DOMAIN: "coconut.cf-app.com"
        NUM_WIN_CELLS: 1
        SOCKET_ADDRESS_FOR_SECURITY_GROUP_TEST: 10.0.0.6:25555
        DOPPLER_URL: wss://doppler.coconut.cf-app.com:443
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -eux

            pushd deployments-loggregator-with-changes
              export ADMIN_PASSWORD=$(bosh interpolate gcp/coconut/cf-vars.yml --path /uaa_scim_users_admin_password)
            popd

            ./wats/scripts/run_wats.sh

- name: promotion
  serial: true
  plan:
  - aggregate:
    - get: loggregator-release-elect
      trigger: false
    - get: loggregator
      resource: loggregator-develop
      trigger: true
      passed:
      - lats
      - cf-release-cats
  - task: promote
    config:
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      platform: linux
      inputs:
          - name: loggregator
          - name: loggregator-release-elect
      outputs:
          - name: promote-develop
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash -ex
            mkdir -p ~/.ssh/
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            pushd loggregator
              git checkout -b merge-branch
            popd
            pushd loggregator-release-elect
              git remote add -f develop-repo ../loggregator
              git checkout release-elect
              git merge -v "develop-repo/merge-branch" -m "Merging develop into release-elect"
            popd
            rsync -ac loggregator-release-elect/ promote-develop/
  - put: loggregator-release-elect
    params:
      repository: promote-develop
      rebase: false

- name: create-final-release
  serial: true
  plan:
  - aggregate:
    - get: loggregator-develop
      trigger: false
    - get: loggregator-master
      resource: loggregator-master
  - task: create-final-release
    config:
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/bosh20
      platform: linux
      params:
        S3_ACCESS_KEY: {{s3-access-key}}
        S3_SECRET_KEY: {{s3-secret-key}}
        SSH_KEY: {{loggregator-key}}
        NEW_VERSION: 77
      inputs:
      - name: loggregator-develop
      - name: loggregator-master
      outputs:
      - name: github-release
      - name: create-final-release
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -ex

            # establish version/tag strings
            new_version="$NEW_VERSION"
            tag_name="v$new_version"

            # write out github release files
            echo "Loggregator $new_version" > github-release/name
            echo $tag_name > github-release/tag
            echo "TBD" > github-release/body

            # setup git for committing
            git config --global user.email "cf-loggregator@pivotal.io"
            git config --global user.name "Loggregator CI"

            # setup ssh for reading from github
            eval "$(ssh-agent -s)"
            mkdir -p ~/.ssh
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
            ssh-add <(echo "$SSH_KEY")

            # build final release on master
            pushd loggregator-master
              # this is needed to land commits on master since the commit for
              # master is checked out as a detatched head when the git
              # resource clones it down
              git checkout master

              # setup private.yml used by `create-release --final`
              cat << EOF > config/private.yml
            ---
            blobstore:
              provider: s3
              options:
                bucket_name: loggregator-release-blobs
                access_key_id: $S3_ACCESS_KEY
                secret_access_key: $S3_SECRET_KEY
                credentials_source: static
            EOF

              # create final release and commit artifcats
              bosh -n create-release --final \
                --tarball ../github-release/release.tgz \
                --version $new_version
              git add .
              git commit -m "Create final release\


            [ci skip]"

              final_release_abbrev=$(git rev-parse --abbrev-ref HEAD)
              final_release_sha=$(git rev-parse HEAD)
              git tag "$tag_name" $final_release_sha
            popd

            # merge final release artifacts with develop
            pushd loggregator-develop
              # this is needed to land commits on develop since the commit for
              # develop is checked out as a detatched head when the git
              # resource clones it down
              git checkout develop

              git remote add -f master-repo ../loggregator-master
              git pull
              git merge -v -m "Merge final release artifacts\


            [ci skip]" "master-repo/$final_release_abbrev"
            popd

            # copy repos into output
            cp -r loggregator-develop loggregator-master create-final-release
  - put: loggregator-final-release-master
    params:
      repository: create-final-release/loggregator-master
      rebase: false
  - put: loggregator-final-release-develop
    params:
      repository: create-final-release/loggregator-develop
      rebase: false
  - put: loggregator-github-release-drafts
    params:
      name: github-release/name
      tag: github-release/tag
      body: github-release/body
      globs:
      - github-release/*.tgz

- name: dropsonde-unit-tests
  serial: true
  plan:
  - aggregate:
    - get: dropsonde
      trigger: true
    - get: sonde-go
      trigger: true
  - task: unit-tests
    config:
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/go17
      platform: linux
      inputs:
      - name: dropsonde
      run:
        path: bash
        args:
        - -c
        - {{dropsonde_unit_tests}}
  - get: loggregator
    resource: loggregator-develop
  - task: bump-dropsonde-in-loggregator
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
        - repository: loggregator/go17
      inputs:
      - name: dropsonde
      - name: loggregator
      outputs:
      - name: bumped-loggregator
      params:
        PARENT: loggregator
        OUTPUT: bumped-loggregator
        SUBMODULE: dropsonde
        SUBMODULE_PATH: src/github.com/cloudfoundry/dropsonde
      run:
        path: bash
        args:
        - -c
        - {{bump_submodule}}

  - put: loggregator-develop
    params:
      repository: bumped-loggregator
      rebase: true

- name: noaa-unit-tests
  serial: true
  plan:
  - aggregate:
    - get: noaa
      trigger: true
    - get: sonde-go
      trigger: true
  - task: unit-tests
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          - repository: loggregator/go17
      inputs:
        - name: noaa
      run:
        path: bash
        args:
        - -c
        - {{noaa_unit_tests}}

  - get: loggregator
    resource: loggregator-develop
  - task: bump-noaa-in-loggregator
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/go17
      inputs:
      - name: noaa
      - name: loggregator
      outputs:
      - name: bumped-loggregator
      params:
        PARENT: loggregator
        OUTPUT: bumped-loggregator
        SUBMODULE: noaa
        SUBMODULE_PATH: src/github.com/cloudfoundry/noaa
      run:
        path: bash
        args:
        - -c
        - {{bump_submodule}}

  - put: loggregator-develop
    params:
      repository: bumped-loggregator
      rebase: true

- name: sonde-go-generate
  serial: true
  plan:
  - aggregate:
    - get: dropsonde-protocol
      trigger: true
    - get: sonde-go
      trigger: false
    - get: loggregator
      resource: loggregator-develop
      trigger: false
  - task: generate
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/protoc
      inputs:
      - name: loggregator
      - name: sonde-go
      - name: dropsonde-protocol
      outputs:
      - name: bumped-sonde-go
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash -e

          set -x

          export GOPATH=$(pwd)
          export PATH=$PATH:$GOPATH/bin

          mkdir -p $GOPATH/src/github.com/cloudfoundry/
          ln -s $GOPATH/sonde-go $GOPATH/src/github.com/cloudfoundry/
          mkdir -p $GOPATH/src/github.com/gogo
          ln -s $GOPATH/loggregator/src/github.com/gogo/protobuf $GOPATH/src/github.com/gogo/protobuf

          cd $GOPATH/src/github.com/cloudfoundry/sonde-go

          pushd definitions
            SHA_FROM=`git rev-parse HEAD`
          popd

          rm -rf definitions && cp -r $GOPATH/dropsonde-protocol definitions

          pushd definitions
            SHA_TO=`git rev-parse HEAD`
            SUBMODULE_LOG=`git log --oneline $SHA_FROM...$SHA_TO`
          popd

          export LD_LIBRARY_PATH=/usr/local/lib

          ./generate-go.sh

          git config user.name "Loggregator CI"
          git config user.email "cf-loggregator@pivotal.io"

          git add events definitions

          set +e
          git diff --quiet
          git diff-index HEAD --exit-code
          if [ $? != 0 ] ; then
            set -e
            git commit -m "Regenerate Go code from new version of dropsonde-protocol

          $SUBMODULE_LOG

          automatic promotion by CI workflow"
          fi

          rsync -ac ./ $GOPATH/bumped-sonde-go/

  - put: sonde-go
    params:
      repository: bumped-sonde-go
  - aggregate:
    - get: dropsonde
      trigger: false
    - get: noaa
      trigger: false
  - aggregate:
    - task: dropsonde-unit-tests
      config:
        image_resource:
          type: docker-image
          source:
          - repository: loggregator/go17
        platform: linux
        inputs:
        - name: dropsonde
        run:
          path: bash
          args:
          - -c
          - {{dropsonde_unit_tests}}
    - task: noaa-unit-tests
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            - repository: loggregator/go17
        inputs:
          - name: noaa
        run:
          path: bash
          args:
          - -c
          - {{noaa_unit_tests}}
  - task: bump-sonde-go-in-loggregator
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/go17
      inputs:
      - name: bumped-sonde-go
      - name: loggregator
      outputs:
      - name: bumped-loggregator
      params:
        PARENT: loggregator
        OUTPUT: bumped-loggregator
        SUBMODULE: bumped-sonde-go
        SUBMODULE_PATH: src/github.com/cloudfoundry/sonde-go
      run:
        path: bash
        args:
        - -c
        - {{bump_submodule}}
  - put: loggregator-develop
    params:
      repository: bumped-loggregator
      rebase: true

- name: create-bosh-lite
  serial_groups:
  - bosh-lite
  plan:
  - aggregate:
    - get: bosh-deployment
    - get: deployments-loggregator
  - task: create-bosh-lite
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/bosh20
      inputs:
      - name: bosh-deployment
      - name: deployments-loggregator
      outputs:
      - name: updated-deployments-loggregator
      params:
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -ex
            deploy_dir=deployments-loggregator/gcp/lite
            if [ -f $deploy_dir/state.json ]; then
              echo Deploy already exists, delete it first
              exit 1
            fi

            # create director
            bosh create-env bosh-deployment/bosh.yml \
              --state $deploy_dir/state.json \
              -o bosh-deployment/gcp/cpi.yml \
              -o bosh-deployment/bosh-lite.yml \
              -o bosh-deployment/jumpbox-user.yml \
              -o $deploy_dir/lite-ops.yml \
              --vars-store $deploy_dir/creds.yml \
              -v director_name="Bosh Lite Director" \
              -v internal_ip=10.100.0.6 \
              -v internal_gw=10.100.0.1 \
              -v internal_cidr=10.100.0.0/24 \
              -v network_name=litenet0 \
              -v outbound_network_name=NatNetwork \
              --var-file gcp_credentials_json=deployments-loggregator/gcp/coconut/tf/terraform-bosh.key.json \
              -v network=cf-network \
              -v subnetwork=bosh-lite \
              -v project_id=cff-loggregator \
              -v tags="[bosh]" \
              -v zone="us-central1-a"

            # upload stemcell needed for bosh-lite "vms"
            bosh alias-env lite -e 10.100.0.6 --ca-cert <(bosh interpolate $deploy_dir/creds.yml --path /director_ssl/ca)
            export BOSH_CLIENT=admin
            export BOSH_CLIENT_SECRET=$(bosh interpolate $deploy_dir/creds.yml --path /admin_password)
            bosh -e lite upload-stemcell https://bosh.io/d/stemcells/bosh-warden-boshlite-ubuntu-trusty-go_agent

            rsync -ac deployments-loggregator/ updated-deployments-loggregator
  - task: commit
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/ubuntu-base
      inputs:
      - name: updated-deployments-loggregator
      outputs:
      - name: committed-deployments-loggregator
      params:
        SOURCE: updated-deployments-loggregator
        PATHS: gcp/lite
        COMMIT_MESSAGE: "Create bosh-lite GCP director"
        OUTPUT: committed-deployments-loggregator
      run:
        path: bash
        args:
        - -c
        - {{commit}}
  - put: deployments-loggregator-with-changes
    params:
      repository: committed-deployments-loggregator
      rebase: true

- name: delete-bosh-lite
  serial_groups:
  - bosh-lite
  plan:
  - aggregate:
    - get: bosh-deployment
    - get: deployments-loggregator
  - task: delete-bosh-lite
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/bosh20
      inputs:
      - name: bosh-deployment
      - name: deployments-loggregator
      outputs:
      - name: updated-deployments-loggregator
      params:
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -ex
            deploy_dir=deployments-loggregator/gcp/lite
            if [ ! -f $deploy_dir/state.json ]; then
              echo Deploy does not exist, create it first
              exit 1
            fi

            bosh delete-env bosh-deployment/bosh.yml \
              --state $deploy_dir/state.json \
              -o bosh-deployment/gcp/cpi.yml \
              -o bosh-deployment/bosh-lite.yml \
              -o bosh-deployment/jumpbox-user.yml \
              --vars-store $deploy_dir/creds.yml \
              -v director_name="Bosh Lite Director" \
              -v internal_ip=10.100.0.6 \
              -v internal_gw=10.100.0.1 \
              -v internal_cidr=10.100.0.0/24 \
              -v network_name=litenet0 \
              -v outbound_network_name=NatNetwork \
              --var-file gcp_credentials_json=deployments-loggregator/gcp/coconut/tf/terraform-bosh.key.json \
              -v network=cf-network \
              -v subnetwork=bosh-lite \
              -v project_id=cff-loggregator \
              -v tags="[bosh]" \
              -v zone="us-central1-a"

            rm -f $deploy_dir/state.json $deploy_dir/creds.yml
            rsync -ac deployments-loggregator/ updated-deployments-loggregator
  - task: commit
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/ubuntu-base
      inputs:
      - name: updated-deployments-loggregator
      outputs:
      - name: committed-deployments-loggregator
      params:
        SOURCE: updated-deployments-loggregator
        PATHS: gcp/lite
        COMMIT_MESSAGE: "Delete bosh-lite GCP director"
        OUTPUT: committed-deployments-loggregator
      run:
        path: bash
        args:
        - -c
        - {{commit}}
  - put: deployments-loggregator-with-changes
    params:
      repository: committed-deployments-loggregator
      rebase: true

- name: diff-cert-generation-scripts
  plan:
  - get: loggregator
    resource: loggregator-develop
    trigger: true
  - get: cf-release
    resource: cf-release-develop
    trigger: true
  - task: diff
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/ubuntu-base
      inputs:
      - name: loggregator
      - name: cf-release
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -e
            echo diffing loggregator cert generation
            diff --unified loggregator/scripts/generate-loggregator-certs \
                           cf-release/scripts/generate-loggregator-certs

groups:
- name: loggregator
  jobs:
  - run-tests
  - run-windows-tests
  - upload-stemcell
  - cf-deploy
  - cats
  - wats
  - loggregator-deploy
  - lats
  - promotion
  - cf-release-deploy
  - cf-release-cats
  - diff-cert-generation-scripts

- name: submodules
  jobs:
  - dropsonde-unit-tests
  - noaa-unit-tests
  - sonde-go-generate

- name: final-release
  jobs:
  - create-final-release

- name: bosh-lite
  jobs:
  - create-bosh-lite
  - delete-bosh-lite
