resources:
- name: loggregator-ci
  type: git
  source:
    uri: git@github.com:cloudfoundry/loggregator-ci.git
    private_key: {{loggregator-key}}

- name: loggregator-develop
  type: git
  source: &loggregator_develop
    uri: git@github.com:cloudfoundry/loggregator-release.git
    branch: develop
    private_key: {{loggregator-key}}
    ignore_paths:
    - .final_builds
    - releases

- name: loggregator-master
  type: git
  source:
    disable_ci_skip: true
    uri: git@github.com:cloudfoundry/loggregator-release.git
    branch: master
    private_key: {{loggregator-key}}

- name: loggregator-backport
  type: git
  source:
    uri: git@github.com:cloudfoundry/loggregator-release.git
    branch: &backport-branch v101.x
    private_key: {{loggregator-key}}

- name: loggregator-release-develop
  type: git
  source:
    uri: git@github.com:cloudfoundry/loggregator-release.git
    branch: develop
    private_key: {{loggregator-key}}
    ignore_paths:
    - .final_builds
    - releases

- name: loggregator-release-master
  type: git
  source:
    uri: git@github.com:cloudfoundry/loggregator-release.git
    branch: master
    private_key: {{loggregator-key}}
    ignore_paths:
    - .final_builds
    - releases

- name: loggregator-release-backport
  type: git
  source:
    uri: git@github.com:cloudfoundry/loggregator-release.git
    branch: *backport-branch
    private_key: {{loggregator-key}}
    ignore_paths:
    - .final_builds
    - releases

- name: loggregator-github-release-drafts
  type: github-release
  source:
    user: cloudfoundry
    repository: loggregator-release
    access_token: {{access-token}}
    drafts: true

- name: cf-syslog-drain-release-develop
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-syslog-drain-release
    branch: develop
    private_key: {{cf-loggregator-oauth-bot-key}}
    ignore_paths:
    - .final_builds
    - releases

- name: cf-syslog-drain-release-master
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-syslog-drain-release
    branch: master
    private_key: {{cf-loggregator-oauth-bot-key}}
    ignore_paths:
    - .final_builds
    - releases

- name: cf-syslog-drain-release-backport
  type: git
  source:
    branch: &cf-syslog-backport-branch v5.x
    uri: git@github.com:cloudfoundry/cf-syslog-drain-release
    private_key: {{cf-loggregator-oauth-bot-key}}

- name: cf-syslog-drain-release-github-release-drafts
  type: github-release
  source:
    user: cloudfoundry
    repository: cf-syslog-drain-release
    access_token: {{access-token}}
    drafts: true

- name: statsd-injector-release-master
  type: git
  source:
    uri: git@github.com:cloudfoundry/statsd-injector-release
    branch: master
    private_key: {{cf-loggregator-oauth-bot-key}}

- name: statsd-injector-release-develop
  type: git
  source:
    uri: git@github.com:cloudfoundry/statsd-injector-release
    branch: develop
    private_key: {{cf-loggregator-oauth-bot-key}}
    disable_ci_skip: true

- name: statsd-injector-release-github-release-drafts
  type: github-release
  source:
    user: cloudfoundry
    repository: statsd-injector-release
    access_token: {{access-token}}
    drafts: true

- name: loggregator-capacity-planning-release
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/loggregator-capacity-planning-release
    branch: master
    private_key: {{cf-loggregator-oauth-bot-key}}

- name: loggregator-bench-release
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/loggregator-bench-release
    branch: master
    private_key: {{cf-loggregator-oauth-bot-key}}

- name: ouroboros-release
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/ouroboros-release
    branch: master
    private_key: {{cf-loggregator-oauth-bot-key}}

- name: reference-nozzle-release
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/reference-nozzle-release
    branch: master
    private_key: {{cf-loggregator-oauth-bot-key}}

- name: cf-drain-cli
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-drain-cli
    branch: master
    private_key: {{cf-loggregator-oauth-bot-key}}

- name: loggregator-tools-master
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/loggregator-tools
    branch: master
    private_key: {{cf-loggregator-oauth-bot-key}}

- name: cf-drain-cli-github-release-drafts
  type: github-release
  source:
    user: cloudfoundry
    repository: cf-drain-cli
    access_token: {{access-token}}
    drafts: true

- name: log-cache-cli
  type: git
  source:
    uri: git@github.com:cloudfoundry/log-cache-cli
    private_key: {{cf-loggregator-oauth-bot-key}}
    branch: master

- name: log-cache-cli-version
  type: semver
  source:
    initial_version: 0.0.0
    bucket: loggregator-ci-versions
    key: log-cache-cli
    access_key_id: {{s3-access-key-id}}
    secret_access_key: {{s3-secret-access-key}}

- name: log-cache-cli-github-release-drafts
  type: github-release
  source:
    user: cloudfoundry
    repository: log-cache-cli
    access_token: {{access-token}}
    drafts: true

- name: noisy-neighbor-nozzle-release
  type: git
  source:
    uri: git@github.com:cloudfoundry/noisy-neighbor-nozzle-release
    branch: master
    private_key: {{cf-loggregator-oauth-bot-key}}

- name: noisy-neighbor-nozzle-repo
  type: git
  source:
    uri: git@github.com:cloudfoundry/noisy-neighbor-nozzle
    branch: master
    private_key: {{cf-loggregator-oauth-bot-key}}

- name: noisy-neighbor-release-drafts
  type: github-release
  source:
    user: cloudfoundry
    repository: noisy-neighbor-nozzle
    access_token: {{access-token}}
    drafts: true

- name: logging-acceptance-tests-release
  type: git
  source:
    uri: git@github.com:cloudfoundry/logging-acceptance-tests-release
    branch: master
    private_key: {{cf-loggregator-oauth-bot-key}}

- name: log-cache-develop
  type: git
  source:
    uri: git@github.com:cloudfoundry/log-cache-release
    branch: develop
    private_key: {{cf-loggregator-oauth-bot-key}}

- name: log-cache-master
  type: git
  source:
    uri: git@github.com:cloudfoundry/log-cache-release
    branch: master
    private_key: {{cf-loggregator-oauth-bot-key}}

- name: log-cache-release-develop
  type: git
  source:
    uri: git@github.com:cloudfoundry/log-cache-release
    branch: develop
    private_key: {{cf-loggregator-oauth-bot-key}}

- name: log-cache-release-master
  type: git
  source:
    uri: git@github.com:cloudfoundry/log-cache-release
    branch: master
    private_key: {{cf-loggregator-oauth-bot-key}}

- name: log-cache-github-release-drafts
  type: github-release
  source:
    user: cloudfoundry
    repository: log-cache-release
    access_token: {{access-token}}
    drafts: true

- name: loggregator-agent-release-develop
  type: git
  source:
    uri: git@github.com:cloudfoundry/loggregator-agent-release
    branch: develop
    private_key: {{cf-loggregator-oauth-bot-key}}

- name: loggregator-agent-release-master
  type: git
  source:
    uri: git@github.com:cloudfoundry/loggregator-agent-release
    branch: master
    private_key: {{cf-loggregator-oauth-bot-key}}

- name: loggregator-agent-github-release-drafts
  type: github-release
  source:
    user: cloudfoundry
    repository: loggregator-agent-release
    access_token: {{access-token}}
    drafts: true

jobs:
- name: bump-golang
  serial: true
  plan:
  - aggregate:
    - get: loggregator-ci
    - get: loggregator-develop
    - get: loggregator-agent-release-develop
    - get: loggregator-capacity-planning-release
    - get: loggregator-bench-release
    - get: logging-acceptance-tests-release
    - get: cf-syslog-drain-release-develop
    - get: statsd-injector-release-develop
    - get: ouroboros-release
    - get: reference-nozzle-release
    - get: noisy-neighbor-nozzle-release
    - get: log-cache-release-develop
  - task: download-go
    file: loggregator-ci/tasks/download-golang/task.yml
    params:
      VERSION: &golang-version 1.10.2
  - do:
    - task: bump-loggregator-release
      file: loggregator-ci/tasks/bump-golang/task.yml
      input_mapping:
        release-repo: loggregator-develop
      output_mapping:
        updated-release-repo: updated-loggregator-release
      params:
        VERSION: *golang-version
        INCLUDE_WINDOWS: true
        ACCESS_KEY_ID: {{s3-access-key-id}}
        SECRET_ACCESS_KEY: {{s3-secret-access-key}}
        BUCKET_NAME: loggregator-release-blobs
    - task: commit-loggregator-release
      file: loggregator-ci/tasks/commit/task.yml
      input_mapping:
        release-repo: updated-loggregator-release
      output_mapping:
        committed-repo: committed-loggregator-release
      params:
        COMMIT_MESSAGE: "Bump golang version"
    - put: loggregator-develop
      params:
        repository: committed-loggregator-release
        rebase: false
  - do:
    - task: bump-loggregator-agent-release
      file: loggregator-ci/tasks/bump-golang/task.yml
      input_mapping:
        release-repo: loggregator-agent-release-develop
      output_mapping:
        updated-release-repo: updated-loggregator-agent-release
      params:
        VERSION: *golang-version
        INCLUDE_WINDOWS: true
        ACCESS_KEY_ID: {{s3-access-key-id}}
        SECRET_ACCESS_KEY: {{s3-secret-access-key}}
        BUCKET_NAME: loggregator-agent-release-blobs
    - task: commit-loggregator-agent-release
      file: loggregator-ci/tasks/commit/task.yml
      input_mapping:
        release-repo: updated-loggregator-agent-release
      output_mapping:
        committed-repo: committed-loggregator-agent-release
      params:
        COMMIT_MESSAGE: "Bump golang version"
    - put: loggregator-agent-release-develop
      params:
        repository: committed-loggregator-agent-release
        rebase: false
  - do:
    - task: bump-loggregator-capacity-planning-release
      file: loggregator-ci/tasks/bump-golang/task.yml
      input_mapping:
        release-repo: loggregator-capacity-planning-release
      output_mapping:
        updated-release-repo: updated-loggregator-capacity-planning-release
      params:
        VERSION: *golang-version
        ACCESS_KEY_ID: {{s3-access-key-id}}
        SECRET_ACCESS_KEY: {{s3-secret-access-key}}
        BUCKET_NAME: loggregator-release-blobs
    - task: commit-loggregator-capacity-planning-release
      file: loggregator-ci/tasks/commit/task.yml
      input_mapping:
        release-repo: updated-loggregator-capacity-planning-release
      output_mapping:
        committed-repo: committed-loggregator-capacity-planning-release
      params:
        COMMIT_MESSAGE: "Bump golang version"
    - put: loggregator-capacity-planning-release
      params:
        repository: committed-loggregator-capacity-planning-release
        rebase: false
  - do:
    - task: bump-loggregator-bench-release
      file: loggregator-ci/tasks/bump-golang/task.yml
      input_mapping:
        release-repo: loggregator-bench-release
      output_mapping:
        updated-release-repo: updated-loggregator-bench-release
      params:
        VERSION: *golang-version
        ACCESS_KEY_ID: {{loggregator-bench-s3-access-key-id}}
        SECRET_ACCESS_KEY: {{loggregator-bench-s3-secret-access-key}}
        BUCKET_NAME: loggregator-bench-release-blobs
    - task: commit-loggregator-bench-release
      file: loggregator-ci/tasks/commit/task.yml
      input_mapping:
        release-repo: updated-loggregator-bench-release
      output_mapping:
        committed-repo: committed-loggregator-bench-release
      params:
        COMMIT_MESSAGE: "Bump golang version"
    - put: loggregator-bench-release
      params:
        repository: committed-loggregator-bench-release
        rebase: false
  - do:
    - task: bump-cf-syslog-drain-release
      file: loggregator-ci/tasks/bump-golang/task.yml
      input_mapping:
        release-repo: cf-syslog-drain-release-develop
      output_mapping:
        updated-release-repo: updated-cf-syslog-drain-release
      params:
        VERSION: *golang-version
        ACCESS_KEY_ID: {{s3-access-key-id}}
        SECRET_ACCESS_KEY: {{s3-secret-access-key}}
        BUCKET_NAME: cf-syslog-drain-release-blobs
    - task: commit-cf-syslog-drain-release
      file: loggregator-ci/tasks/commit/task.yml
      input_mapping:
        release-repo: updated-cf-syslog-drain-release
      output_mapping:
        committed-repo: committed-cf-syslog-drain-release
      params:
        COMMIT_MESSAGE: "Bump golang version"
    - put: cf-syslog-drain-release-develop
      params:
        repository: committed-cf-syslog-drain-release
        rebase: false
  - do:
    - task: bump-statsd-injector-release
      file: loggregator-ci/tasks/bump-golang/task.yml
      input_mapping:
        release-repo: statsd-injector-release-develop
      output_mapping:
        updated-release-repo: updated-statsd-injector-release
      params:
        VERSION: *golang-version
        ACCESS_KEY_ID: {{s3-access-key-id}}
        SECRET_ACCESS_KEY: {{s3-secret-access-key}}
        BUCKET_NAME: statsd-injector-release-blobs
    - task: commit-statsd-injector-release
      file: loggregator-ci/tasks/commit/task.yml
      input_mapping:
        release-repo: updated-statsd-injector-release
      output_mapping:
        committed-repo: committed-statsd-injector-release
      params:
        COMMIT_MESSAGE: "Bump golang version"
    - put: statsd-injector-release-develop
      params:
        repository: committed-statsd-injector-release
        rebase: false
  - do:
    - task: bump-ouroboros-release
      file: loggregator-ci/tasks/bump-golang/task.yml
      input_mapping:
        release-repo: ouroboros-release
      output_mapping:
        updated-release-repo: updated-ouroboros-release
      params:
        VERSION: *golang-version
        ACCESS_KEY_ID: {{s3-access-key-id}}
        SECRET_ACCESS_KEY: {{s3-secret-access-key}}
        BUCKET_NAME: loggregator-release-blobs
    - task: commit-ouroboros-release
      file: loggregator-ci/tasks/commit/task.yml
      input_mapping:
        release-repo: updated-ouroboros-release
      output_mapping:
        committed-repo: committed-ouroboros-release
      params:
        COMMIT_MESSAGE: "Bump golang version"
    - put: ouroboros-release
      params:
        repository: committed-ouroboros-release
        rebase: false
  - do:
    - task: bump-reference-nozzle-release
      file: loggregator-ci/tasks/bump-golang/task.yml
      input_mapping:
        release-repo: reference-nozzle-release
      output_mapping:
        updated-release-repo: updated-reference-nozzle-release
      params:
        VERSION: *golang-version
        ACCESS_KEY_ID: {{s3-access-key-id}}
        SECRET_ACCESS_KEY: {{s3-secret-access-key}}
        BUCKET_NAME: reference-nozzle-release-blobs
    - task: commit-reference-nozzle-release
      file: loggregator-ci/tasks/commit/task.yml
      input_mapping:
        release-repo: updated-reference-nozzle-release
      output_mapping:
        committed-repo: committed-reference-nozzle-release
      params:
        COMMIT_MESSAGE: "Bump golang version"
    - put: reference-nozzle-release
      params:
        repository: committed-reference-nozzle-release
        rebase: false
  - do:
    - task: bump-noisy-neighbor-nozzle-release
      file: loggregator-ci/tasks/bump-golang/task.yml
      input_mapping:
        release-repo: noisy-neighbor-nozzle-release
      output_mapping:
        updated-release-repo: updated-noisy-neighbor-nozzle-release
      params:
        VERSION: *golang-version
        ACCESS_KEY_ID: {{s3-access-key-id}}
        SECRET_ACCESS_KEY: {{s3-secret-access-key}}
        BUCKET_NAME: noisy-neighbor-release-blobs
    - task: commit-noisy-neighbor-nozzle-release
      file: loggregator-ci/tasks/commit/task.yml
      input_mapping:
        release-repo: updated-noisy-neighbor-nozzle-release
      output_mapping:
        committed-repo: committed-noisy-neighbor-nozzle-release
      params:
        COMMIT_MESSAGE: "Bump golang version"
    - put: noisy-neighbor-nozzle-release
      params:
        repository: committed-noisy-neighbor-nozzle-release
        rebase: false
  - do:
    - task: bump-log-cache-release
      file: loggregator-ci/tasks/bump-golang/task.yml
      input_mapping:
        release-repo: log-cache-release-develop
      output_mapping:
        updated-release-repo: updated-log-cache-release
      params:
        VERSION: *golang-version
        ACCESS_KEY_ID: {{s3-access-key-id}}
        SECRET_ACCESS_KEY: {{s3-secret-access-key}}
        BUCKET_NAME: log-cache-release-blobs
    - task: commit-log-cache-release
      file: loggregator-ci/tasks/commit/task.yml
      input_mapping:
        release-repo: updated-log-cache-release
      output_mapping:
        committed-repo: committed-log-cache-release
      params:
        COMMIT_MESSAGE: "Bump golang version"
    - put: log-cache-release-develop
      params:
        repository: committed-log-cache-release
        rebase: false
  - do:
    - task: bump-logging-acceptance-tests-release
      file: loggregator-ci/tasks/bump-golang/task.yml
      input_mapping:
        release-repo: logging-acceptance-tests-release
      output_mapping:
        updated-release-repo: updated-logging-acceptance-tests-release
      params:
        VERSION: *golang-version
        ACCESS_KEY_ID: {{s3-access-key-id}}
        SECRET_ACCESS_KEY: {{s3-secret-access-key}}
        BUCKET_NAME: logging-acceptance-tests-blobs
    - task: commit-logging-acceptance-tests-release
      file: loggregator-ci/tasks/commit/task.yml
      input_mapping:
        release-repo: updated-logging-acceptance-tests-release
      output_mapping:
        committed-repo: committed-logging-acceptance-tests-release
      params:
        COMMIT_MESSAGE: "Bump golang version"
    - put: logging-acceptance-tests-release
      params:
        repository: committed-logging-acceptance-tests-release
        rebase: false

- name: loggregator-create-release
  serial: true
  plan:
  - aggregate:
    - get: loggregator-develop
    - get: loggregator-master
      resource: loggregator-master
    - get: loggregator-ci
  - task: create-final-release
    file: loggregator-ci/tasks/create-final-release/task.yml
    input_mapping:
      to-repo: loggregator-develop
      from-repo: loggregator-master
    params:
      S3_ACCESS_KEY: {{s3-access-key}}
      S3_SECRET_KEY: {{s3-secret-key}}
      BLOBSTORE_BUCKET: loggregator-release-blobs
      SSH_KEY: {{loggregator-key}}
      NEW_VERSION: "102.1"
      RELEASE_NAME: Loggregator
      TO_BRANCH: develop
      FROM_BRANCH: master
  - put: loggregator-release-master
    params:
      repository: repos/from-repo
      rebase: false
  - put: loggregator-release-develop
    params:
      repository: repos/to-repo
      rebase: false
  - put: loggregator-github-release-drafts
    params:
      name: github-release/name
      tag: github-release/tag
      body: github-release/body
      globs:
      - github-release/*.tgz

- name: loggregator-create-backport-release
  serial: true
  plan:
  - get: loggregator-backport
  - task: create-backport
    config:
      image_resource:
        type: docker-image
        source:
          repository: loggregator/base
      platform: linux
      params:
        S3_ACCESS_KEY: {{s3-access-key}}
        S3_SECRET_KEY: {{s3-secret-key}}
        SSH_KEY: {{loggregator-key}}
        NEW_VERSION: "101.11"
        BRANCH_NAME: *backport-branch
      inputs:
      - name: loggregator-backport
      outputs:
      - name: github-release
      - name: create-final-release
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -ex

            # establish version/tag strings
            new_version="$NEW_VERSION"
            tag_name="v$new_version"
            backport_branch="$BRANCH_NAME"

            # write out github release files
            echo "Loggregator $new_version" > github-release/name
            echo $tag_name > github-release/tag
            echo "TBD" > github-release/body

            # setup ssh for reading from github
            eval "$(ssh-agent -s)"
            mkdir -p ~/.ssh
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
            ssh-add <(echo "$SSH_KEY")

            # build final release on backport branchd
            pushd loggregator-backport
              export GOPATH=$PWD
              export PATH=$PATH:$GOPATH/bin
              git checkout "$backport_branch"

              # Ensure sync-package-specs has been run
              ./scripts/sync-package-specs

              # Assert there is not diff
              if ! git diff-index --quiet HEAD --; then
                echo "Looks like sync-package-specs wasn't run"
                exit 1
              fi

              # setup private.yml used by `create-release --final`
              cat << EOF > config/private.yml
            ---
            blobstore:
              provider: s3
              options:
                bucket_name: loggregator-release-blobs
                access_key_id: $S3_ACCESS_KEY
                secret_access_key: $S3_SECRET_KEY
                credentials_source: static
            EOF

              # create final release and commit artifcats
              bosh -n create-release --sha2 --final \
                --tarball ../github-release/release.tgz \
                --version $new_version
              git add .
              git commit -m "Create final release"

              final_release_abbrev=$(git rev-parse --abbrev-ref HEAD)
              final_release_sha=$(git rev-parse HEAD)
              git tag "$tag_name" $final_release_sha
            popd

            # copy repos into output
            cp -r loggregator-backport create-final-release
  - put: loggregator-release-backport
    params:
      repository: create-final-release/loggregator-backport
      rebase: false
  - put: loggregator-github-release-drafts
    params:
      name: github-release/name
      tag: github-release/tag
      body: github-release/body
      globs:
      - github-release/*.tgz

- name: cf-syslog-drain-create-final-release
  serial: true
  plan:
  - aggregate:
    - get: cf-syslog-drain-release-develop
    - get: cf-syslog-drain-release-master
    - get: loggregator-ci
  - task: create-final-release
    file: loggregator-ci/tasks/create-final-release/task.yml
    input_mapping:
      to-repo: cf-syslog-drain-release-develop
      from-repo: cf-syslog-drain-release-master
    params:
      S3_ACCESS_KEY: {{s3-access-key-id}}
      S3_SECRET_KEY: {{s3-secret-access-key}}
      BLOBSTORE_BUCKET: cf-syslog-drain-release-blobs
      SSH_KEY: {{loggregator-key}}
      NEW_VERSION: "6.5"
      RELEASE_NAME: "CF Syslog Drain Release"
      TO_BRANCH: develop
      FROM_BRANCH: master
  - put: cf-syslog-drain-release-master
    params:
      repository: repos/from-repo
      rebase: false
  - put: cf-syslog-drain-release-develop
    params:
      repository: repos/to-repo
      rebase: false
  - put: cf-syslog-drain-release-github-release-drafts
    params:
      name: github-release/name
      tag: github-release/tag
      body: github-release/body
      globs:
      - github-release/*.tgz

- name: cf-syslog-release-create-backport
  serial: true
  plan:
  - get: cf-syslog-drain-release-backport
    trigger: false
  - task: create-backport
    config:
      image_resource:
        type: docker-image
        source:
          repository: loggregator/base
      platform: linux
      params:
        S3_ACCESS_KEY: {{s3-access-key-id}}
        S3_SECRET_KEY: {{s3-secret-access-key}}
        SSH_KEY: {{loggregator-key}}
        BLOBSTORE_BUCKET: cf-syslog-drain-release-blobs
        NEW_VERSION: "5.2"
        BRANCH_NAME: *cf-syslog-backport-branch
      inputs:
      - name: cf-syslog-drain-release-backport
      outputs:
      - name: github-release
      - name: create-final-release
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -ex

            # establish version/tag strings
            new_version="$NEW_VERSION"
            tag_name="v$new_version"
            backport_branch="$BRANCH_NAME"

            # write out github release files
            echo "CF Syslog Drain Release $new_version" > github-release/name
            echo $tag_name > github-release/tag
            echo "TBD" > github-release/body

            # setup git for committing
            git config --global user.email "cf-loggregator@pivotal.io"
            git config --global user.name "Loggregator CI"

            # setup ssh for reading from github
            eval "$(ssh-agent -s)"
            mkdir -p ~/.ssh
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
            ssh-add <(echo "$SSH_KEY")

            # build final release on backport branchd
            pushd cf-syslog-drain-release-backport
              export GOPATH=$PWD
              export PATH=$PATH:$GOPATH/bin
              git checkout "$backport_branch"

              # Ensure sync-package-specs has been run
              ./scripts/sync-package-specs

              # Assert there is not diff
              if [ ! test $(git diff-index --quiet HEAD --) ]; then
                echo "Looks like sync-package-specs wasn't ran"
                exit 1
              fi

              # setup private.yml used by `create-release --final`
              cat << EOF > config/private.yml
            ---
            blobstore:
              provider: s3
              options:
                bucket_name: $BLOBSTORE_BUCKET
                access_key_id: $S3_ACCESS_KEY
                secret_access_key: $S3_SECRET_KEY
                credentials_source: static
            EOF

              # create final release and commit artifcats
              bosh -n create-release --sha2 --final \
                --tarball ../github-release/release.tgz \
                --version $new_version
              git add .
              git commit -m "Create final release"

              final_release_abbrev=$(git rev-parse --abbrev-ref HEAD)
              final_release_sha=$(git rev-parse HEAD)
              git tag "$tag_name" $final_release_sha
            popd

            # copy repos into output
            cp -r cf-syslog-drain-release-backport create-final-release
  - put: cf-syslog-drain-release-backport
    params:
      repository: create-final-release/cf-syslog-drain-release-backport
      rebase: false
  - put: cf-syslog-drain-release-github-release-drafts
    params:
      name: github-release/name
      tag: github-release/tag
      body: github-release/body
      globs:
      - github-release/*.tgz

- name: statsd-injector-create-final-release
  serial: true
  plan:
  - aggregate:
    - get: statsd-injector-release-develop
    - get: statsd-injector-release-master
    - get: loggregator-ci
  - task: create-final-release
    file: loggregator-ci/tasks/create-final-release/task.yml
    input_mapping:
      to-repo: statsd-injector-release-develop
      from-repo: statsd-injector-release-master
    params:
      S3_ACCESS_KEY: {{s3-access-key-id}}
      S3_SECRET_KEY: {{s3-secret-access-key}}
      BLOBSTORE_BUCKET: statsd-injector-release-blobs
      SSH_KEY: {{loggregator-key}}
      NEW_VERSION: 1.3.0
      RELEASE_NAME: statsd-injector-release
      TO_BRANCH: develop
      FROM_BRANCH: master
  - aggregate:
    - put: statsd-injector-release-master
      params:
        repository: repos/from-repo
        rebase: false
    - put: statsd-injector-release-develop
      params:
        repository: repos/to-repo
        rebase: false
    - put: statsd-injector-release-github-release-drafts
      params:
        name: github-release/name
        tag: github-release/tag
        body: github-release/body
        globs:
        - github-release/*.tgz

- name: cf-drain-cli
  serial: true
  plan:
  - aggregate:
    - get: loggregator-ci
    - get: cf-drain-cli
    - get: loggregator-tools-master
  - task: create-binaries
    file: loggregator-ci/tasks/release-cf-drain-cli/task.yml
    params:
      VERSION_MAJOR: 0
      VERSION_MINOR: 7
    input_mapping:
      loggregator-tools: loggregator-tools-master
  - put: cf-drain-cli
    params:
      repository: output-repo/cf-drain-cli
      rebase: false
  - put: cf-drain-cli-github-release-drafts
    params:
      name: github-release/name
      tag: github-release/tag
      body: github-release/body
      globs:
      - github-release/builds/*

- name: log-cache-cli
  serial: true
  plan:
  - aggregate:
    - get: log-cache-cli
    - get: log-cache-cli-version
      params: {bump: minor}
  - task: create-binaries
    config:
      image_resource:
        type: docker-image
        source:
          repository: loggregator/base
      platform: linux
      inputs:
      - name: log-cache-cli
      - name: log-cache-cli-version
      outputs:
      - name: output-repo
      - name: github-release
      - name: version
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -ex

            # establish version/tag strings
            semver="$(cat log-cache-cli-version/version)"
            cp log-cache-cli-version/version version

            # build version to inject into build with ldflags
            IFS="." read -r -a version_parts <<< $semver
            version="{\"Major\":${version_parts[0]},\"Minor\":${version_parts[1]},\"Build\":${version_parts[2]}}"

            # write out github release files
            echo "log cache cli $semver" > github-release/name
            echo "v$semver" > github-release/tag
            echo "TBD" > github-release/body
            cp -R log-cache-cli/. output-repo

            export WORKSPACE="$PWD"

            mkdir -p go
            pushd go
              export GOPATH="$PWD"
              mkdir -p src/code.cloudfoundry.org
              cp -R "$WORKSPACE/log-cache-cli/ src/code.cloudfoundry.org"
              go get ./...
            popd

            mkdir github-release/builds
            pushd "$GOPATH/src/code.cloudfoundry.org/log-cache-cli/cmd/cf-lc-plugin"
              GOOS=linux go build -ldflags "-X main.version=$version" -o $WORKSPACE/github-release/builds/log-cache-cf-plugin-linux
              GOOS=darwin go build -ldflags "-X main.version=$version" -o $WORKSPACE/github-release/builds/log-cache-cf-plugin-darwin
              GOOS=windows go build -ldflags "-X main.version=$version" -o $WORKSPACE/github-release/builds/log-cache-cf-plugin-windows
            popd
            pushd "$GOPATH/src/code.cloudfoundry.org/log-cache-cli/cmd/lc"
              GOOS=linux go build -ldflags "-X main.version=$version" -o $WORKSPACE/github-release/builds/log-cache-linux
              GOOS=darwin go build -ldflags "-X main.version=$version" -o $WORKSPACE/github-release/builds/log-cache-darwin
              GOOS=windows go build -ldflags "-X main.version=$version" -o $WORKSPACE/github-release/builds/log-cache-windows
            popd

  - put: log-cache-cli
    params:
      repository: output-repo
      rebase: false
      tag: github-release/tag
  - put: log-cache-cli-github-release-drafts
    params:
      name: github-release/name
      tag: github-release/tag
      body: github-release/body
      globs:
      - github-release/builds/*
  - put: log-cache-cli-version
    params:
      file: version/version

- name: noisy-neighbor-binaries
  serial: true
  plan:
  - aggregate:
    - get: noisy-neighbor-nozzle-repo
  - task: create-binaries
    config:
      image_resource:
        type: docker-image
        source:
          repository: loggregator/base
      platform: linux
      params:
        VERSION_MAJOR: 1
        VERSION_MINOR: 5
        VERSION_PATCH: 1
      inputs:
      - name: noisy-neighbor-nozzle-repo
      outputs:
      - name: binary-output
      - name: github-release
      - name: repo-output
      run:
        path: bash
        args:
          - -c
          - |
            #!/bin/bash
            set -ex

            # establish version/tag strings
            version="{\"Major\":$VERSION_MAJOR,\"Minor\":$VERSION_MINOR,\"Build\":$VERSION_PATCH}"
            semver="v$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH"

            # write out github release files
            echo "noisy-neighbor-nozzle $semver" > github-release/name
            echo $semver > github-release/tag
            echo "TBD" > github-release/body
            cp -R noisy-neighbor-nozzle-repo/. repo-output

            export WORKSPACE=$PWD

            mkdir -p go
            pushd go
              export GOPATH=$PWD
              mkdir -p src/code.cloudfoundry.org
              cp -R $WORKSPACE/noisy-neighbor-nozzle-repo/ src/code.cloudfoundry.org/
            popd

            mkdir $WORKSPACE/noisy-neighbor
            pushd $GOPATH/src/code.cloudfoundry.org/noisy-neighbor-nozzle-repo/
              go get ./...
              for c in $(ls cmd); do
                pushd cmd/$c
                  binary_file=noisy-neighbor-$c
                  GOOS=linux go build -o $WORKSPACE/noisy-neighbor/$c
                popd
              done
            popd

            mv noisy-neighbor/deployer noisy-neighbor/deployer-linux
            cp noisy-neighbor-nozzle-repo/cmd/deployer/manifest/manifest_template.yml noisy-neighbor/.
            rm noisy-neighbor/cli-plugin

            pushd $GOPATH/src/code.cloudfoundry.org/noisy-neighbor-nozzle-repo/cmd/deployer
              GOOS=darwin go build -o $WORKSPACE/noisy-neighbor/deployer-darwin
              GOOS=windows go build -o $WORKSPACE/noisy-neighbor/deployer-windows
            popd

            tar czvf binary-output/noisy-neighbor.tgz noisy-neighbor

            pushd $GOPATH/src/code.cloudfoundry.org/noisy-neighbor-nozzle-repo/cmd/cli-plugin
              GOOS=linux go build -ldflags "-X main.version=$version" -o $WORKSPACE/binary-output/noisy-neighbor-cli-plugin-linux
              GOOS=darwin go build -ldflags "-X main.version=$version" -o $WORKSPACE/binary-output/noisy-neighbor-cli-plugin-darwin
              GOOS=windows go build -ldflags "-X main.version=$version" -o $WORKSPACE/binary-output/noisy-neighbor-cli-plugin-windows
            popd
  - put: noisy-neighbor-nozzle-repo
    params:
      repository: repo-output
      rebase: false
      tag: github-release/tag
  - put: noisy-neighbor-release-drafts
    params:
      name: github-release/name
      tag: github-release/tag
      body: github-release/body
      globs:
      - binary-output/*

- name: log-cache-create-final-release
  serial: true
  plan:
  - aggregate:
    - get: log-cache-develop
    - get: log-cache-master
      resource: log-cache-master
    - get: loggregator-ci
  - task: create-final-release
    file: loggregator-ci/tasks/create-final-release/task.yml
    input_mapping:
      to-repo: log-cache-develop
      from-repo: log-cache-master
    params:
      S3_ACCESS_KEY: {{loggregator-team-s3-access-key}}
      S3_SECRET_KEY: {{loggregator-team-s3-secret-key}}
      BLOBSTORE_BUCKET: log-cache-release-blobs
      SSH_KEY: {{loggregator-key}}
      NEW_VERSION: "1.1.1"
      RELEASE_NAME: "Log Cache"
      TO_BRANCH: develop
      FROM_BRANCH: master
  - put: log-cache-release-master
    params:
      repository: repos/from-repo
      rebase: false
  - put: log-cache-release-develop
    params:
      repository: repos/to-repo
      rebase: false
  - put: log-cache-github-release-drafts
    params:
      name: github-release/name
      tag: github-release/tag
      body: github-release/body
      globs:
      - github-release/*.tgz

- name: loggregator-agent-create-final-release
  serial: true
  plan:
  - aggregate:
    - get: loggregator-agent-release-develop
    - get: loggregator-agent-release-master
    - get: loggregator-ci
  - task: create-final-release
    file: loggregator-ci/tasks/create-final-release/task.yml
    input_mapping:
      to-repo: loggregator-agent-release-develop
      from-repo: loggregator-agent-release-master
    params:
      S3_ACCESS_KEY: {{s3-access-key}}
      S3_SECRET_KEY: {{s3-secret-key}}
      BLOBSTORE_BUCKET: loggregator-agent-release-blobs
      SSH_KEY: {{loggregator-key}}
      NEW_VERSION: "1.0"
      RELEASE_NAME: "Loggregator Agent"
      TO_BRANCH: develop
      FROM_BRANCH: master
  - put: loggregator-agent-release-master
    params:
      repository: repos/from-repo
      rebase: false
  - put: loggregator-agent-release-develop
    params:
      repository: repos/to-repo
      rebase: false
  - put: loggregator-agent-github-release-drafts
    params:
      name: github-release/name
      tag: github-release/tag
      body: github-release/body
      globs:
      - github-release/*.tgz
