<%
bosh_releases = %w(loggregator loggregator-agent statsd-injector cf-syslog-drain leadership-election)
standalone_releases = %w(service-metrics service-logs)

cfd_smoke_tests = %w(cats cfar-lats)
smoke_tests = {
  "loggregator" => cfd_smoke_tests,
  "loggregator-agent" => cfd_smoke_tests,
  "statsd-injector" => cfd_smoke_tests,
  "cf-syslog-drain" => cfd_smoke_tests,
  "leadership-election" => cfd_smoke_tests,
  "service-metrics" => ["service-metrics-smoke-tests"],
  "service-logs" => ["service-logs-smoke-tests"],
}

run_windows_tests = {
  "loggregator-agent" => true,
}

clis = {
  "log-stream" => "github.com/cloudfoundry/log-stream-cli",
  "cf-drain" => "code.cloudfoundry.org/cf-drain-cli",
}
%>

groups:
- name: all
  jobs:
  - cf-deploy
  - cfar-lats
  - cats
  - test-releases-can-be-exported

  - noisy-neighbor-nozzle-tests
  - noisy-neighbor-nozzle-deploy

<% bosh_releases.each do |release| %>
  - <%= release %>-tests-with-bumped-modules
  - <%= release %>-promotion
  - <%= release %>-master-promotion
<% end %>

<% standalone_releases.each do |release| %>
  - <%= release %>-tests-with-bumped-modules
  - <%= release %>-deploy
  - <%= release %>-smoke-tests
  - <%= release %>-promotion
  - <%= release %>-master-promotion
<% end %>

<% clis.each_key do |cli| %>
  - <%= cli %>-cli-tests
  - <%= cli %>-cli-promotion
<% end %>

<% clis.each_key do |cli| %>
- name: <%= cli %>-cli
  jobs:
  - <%= cli %>-cli-tests
  - cf-deploy
  - cats
  - cfar-lats
  - <%= cli %>-cli-promotion
<% end %>

<% bosh_releases.each do |release| %>
- name: <%= release %>
  jobs:
  - <%= release %>-tests-with-bumped-modules
  - cf-deploy
  - cfar-lats
  - cats
  - test-releases-can-be-exported
  - <%= release %>-promotion
  - <%= release %>-master-promotion
<% end %>

<% standalone_releases.each do |release| %>
- name: <%= release %>
  jobs:
  - <%= release %>-tests-with-bumped-modules
  - <%= release %>-deploy
  - <%= release %>-smoke-tests
  - test-releases-can-be-exported
  - <%= release %>-promotion
  - <%= release %>-master-promotion
<% end %>

- name: noisy-neighbor
  jobs:
  - noisy-neighbor-nozzle-tests
  - noisy-neighbor-nozzle-deploy

- name: log-cache
  jobs:
  - log-cache-tests
  - cf-deploy
  - cats
  - cfar-lats

resources:
- name: 5m
  type: time
  source:
    interval: 5m

- name: 24h
  type: time
  source:
    interval: 24h

- name: cf-acceptance-tests
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry/cf-acceptance-tests.git

- name: cf-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment
    tag_filter: v*
    private_key: ((loggregator-key))

- name: cf-deployment-concourse-tasks
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks
    tag_filter: v*

- name: concourse-tasks
  type: git
  source:
    branch: master
    uri: https://github.com/pivotal-cf/concourse-tasks

- name: cfar-logging-acceptance-tests
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry/cfar-logging-acceptance-tests.git

- name: deployments-loggregator
  type: git
  source:
    uri: git@github.com:cloudfoundry/deployments-loggregator.git
    branch: master
    private_key: ((deployments-loggregator-key))

- name: denver-deployments
  type: git
  source:
    uri: git@github.com:pivotal-cf/denver-deployments.git
    branch: master
    private_key: ((cf-loggregator-oauth-bot-key))

- name: loggregator-ci
  type: git
  source:
    uri: git@github.com:cloudfoundry/loggregator-ci
    branch: master
    private_key: ((cf-loggregator-oauth-bot-key))

- name: log-cache-release
  type: git
  source:
    uri: git@github.com:cloudfoundry/log-cache-release
    branch: syslog-server
    private_key: ((cf-loggregator-oauth-bot-key))

- name: log-cache-ci
  type: git
  source:
    uri: git@github.com:cloudfoundry/log-cache-ci
    branch: master
    private_key: ((cf-loggregator-oauth-bot-key))

- name: noisy-neighbor-nozzle
  type: git
  source:
    uri: https://github.com/cloudfoundry/noisy-neighbor-nozzle

<% (bosh_releases + standalone_releases).each do |release| %>
- name: <%= release %>-release-elect
  type: git
  source:
    uri: git@github.com:cloudfoundry/<%= release %>-release.git
    branch: release-elect
    private_key: ((cf-loggregator-oauth-bot-key))
    ignore_paths:
      - .final_builds
      - releases

- name: <%= release %>-release
  type: git
  source:
    uri: git@github.com:cloudfoundry/<%= release %>-release.git
    branch: develop
    private_key: ((cf-loggregator-oauth-bot-key))
    ignore_paths:
      - .final_builds
      - releases

- name: <%= release %>-release-master
  type: git
  source:
    uri: git@github.com:cloudfoundry/<%= release %>-release.git
    branch: master
    private_key: ((cf-loggregator-oauth-bot-key))
    disable_ci_skip: true
<% end %>

<% clis.each_key do |cli| %>
- name: <%= cli %>-cli
  type: git
  source:
    uri: https://github.com/cloudfoundry/<%= cli %>-cli
    branch: develop

- name: <%= cli %>-cli-master
  type: git
  source:
    uri: git@github.com:cloudfoundry/<%= cli %>-cli
    branch: master
    private_key: ((cf-loggregator-oauth-bot-key))
<% end %>

jobs:
###############################################################################
# CLIS
###############################################################################
<% clis.each do |cli, import_path| %>
- name: <%= cli %>-cli-tests
  public: true
  plan:
  - aggregate:
    - get: loggregator-ci
    - get: <%= cli %>-cli
      trigger: true
  - task: run-tests
    file: loggregator-ci/tasks/go-test-with-latest-packages/task.yml
    input_mapping:
      source-repo: <%= cli %>-cli
    params:
      IMPORT_PATH: <%= import_path %>

- name: <%= cli %>-cli-promotion
  serial: true
  plan:
  - get: 5m
    trigger: true
  - aggregate:
    - get: <%= cli %>-cli
      passed: ["cfar-lats"]
      trigger: true
    - get: <%= cli %>-cli-master
    - get: loggregator-ci
  - task: bumper
    file: loggregator-ci/tasks/bumper/task.yml
    input_mapping:
      source: <%= cli %>-cli
      dest: <%= cli %>-cli-master
    params:
      SOURCE_BRANCH: develop
      DEST_BRANCH: master
  - put: <%= cli %>-cli-master
    params:
      repository: merged-dest
<% end %>


###############################################################################
# LOG CACHE TESTS
###############################################################################
- name: log-cache-tests
  public: true
  serial: true
  plan:
  - aggregate:
    - get: loggregator-ci
    - get: log-cache-release
      trigger: true
  - task: run-tests
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/base
      inputs:
      - name: log-cache-release
      run:
        path: /bin/bash
        args:
        - "-c"
        - |
          set -exuo pipefail

          export GOPATH=$PWD/log-cache-release
          pushd log-cache-release/src/code.cloudfoundry.org/log-cache
            ginkgo -r -race
          popd

###############################################################################
# BOSH RELEASES
###############################################################################
<% (bosh_releases + standalone_releases).each do |release| %>
- name: <%= release %>-tests-with-bumped-modules
  public: true
  serial: true
  plan:
  - aggregate:
    - get: loggregator-ci
    - get: 24h
      trigger: true
    - get: <%= release %>-release
      trigger: true
  - aggregate:
    - task: run-tests
      file: loggregator-ci/tasks/go-bump-modules-and-test/task.yml
      input_mapping:
        source-repo: <%= release %>-release
  <% if run_windows_tests[release] %>
    - do:
      - task: build-windows-test-binary
        file: loggregator-ci/tasks/go-windows-tests/build-binary/task.yml
        input_mapping:
          release: <%= release %>-release
      - task: run-windows-tests
        file: loggregator-ci/tasks/go-windows-tests/run-tests/task.yml
  <% end %>
  - task: commit
    file: loggregator-ci/tasks/commit/task.yml
    input_mapping:
      release-repo: bumped-source
    output_mapping:
      committed-repo: committed-<%= release %>-release
    params:
      COMMIT_MESSAGE: "Bump modules"
  - put: <%= release %>-release
    params:
      repository: committed-<%= release %>-release
      rebase: true

- name: <%= release %>-promotion
  serial: true
  plan:
  - aggregate:
    - get: develop
      resource: <%= release %>-release
      trigger: true
      passed: <%= smoke_tests[release] + ["test-releases-can-be-exported"] %>
    - get: <%= release %>-release-elect
  - put: <%= release %>-release-elect
    params:
      repository: develop

- name: <%= release %>-master-promotion
  serial: true
  plan:
  - aggregate:
    - get: 5m
      trigger: true
    - get: <%= release %>-release-elect
      passed: ["<%= release %>-promotion"]
      trigger: true
    - get: <%= release %>-release-master
    - get: loggregator-ci
  - task: bumper
    file: loggregator-ci/tasks/bumper/task.yml
    input_mapping:
      source: <%= release %>-release-elect
      dest: <%= release %>-release-master
    params:
      SOURCE_BRANCH: release-elect
      DEST_BRANCH: master
  - put: <%= release %>-release-master
    params:
      repository: merged-dest
<% end %>

###############################################################################
# SERVICE LOGS
###############################################################################
- name: service-logs-deploy
  serial: true
  plan:
  - aggregate:
    - get: 24h
      trigger: true
    - get: cf-deployment-concourse-tasks
    - get: service-logs-release
      passed: [service-logs-tests-with-bumped-modules]
      trigger: true
    - get: bbl-state
      resource: deployments-loggregator
    - get: loggregator-ci
  - task: upload-service-logs-release
    file: loggregator-ci/tasks/upload-release/task.yml
    input_mapping:
      bosh-release-dir: service-logs-release
    params:
      BBL_STATE_DIR: ((acceptance_bbl_state_dir))
  - task: prepare-ops-files
    file: loggregator-ci/tasks/prepare-service-logs-ops/task.yml
    params:
      ENV_NAME: ((acceptance_env_name))
  - task: deploy-standalone
    file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
    input_mapping:
      vars-store: bbl-state
      ops-files: ops-files
      vars-files: bbl-state
      cf-deployment: service-logs-release
    params:
      SYSTEM_DOMAIN: ((acceptance_system_domain))
      BBL_STATE_DIR: ((acceptance_bbl_state_dir))
      DEPLOYMENT_NAME: test-service-logs
      MANIFEST_FILE: manifests/test-service-logs.yml
      OPS_FILES: |
        on-the-fly.yml

- name: service-logs-smoke-tests
  serial: true
  plan:
  - aggregate:
    - get: 24h
      trigger: true
    - get: cf-deployment-concourse-tasks
    - get: service-logs-release
      passed: [service-logs-deploy]
      trigger: true
    - get: bbl-state
      resource: deployments-loggregator
    - get: loggregator-ci
  - task: test-service-logs
    file: loggregator-ci/tasks/service-logs-smoke-test/task.yml
    params:
      BBL_STATE_DIR: ((acceptance_bbl_state_dir))
      CF_API: https://api.((acceptance_system_domain))
      USERNAME: admin
      ORG: system
      SPACE: blackbox-testing

###############################################################################
# SERVICE METRICS INJECTOR
###############################################################################
- name: service-metrics-deploy
  serial: true
  serial_groups: ["cf-deploy"]
  plan:
  - aggregate:
    - get: 24h
      trigger: true
    - get: cf-deployment-concourse-tasks
    - get: service-metrics-release
      trigger: true
      passed: ["service-metrics-tests-with-bumped-modules"]
    - get: deployments-loggregator
    - get: bbl-state
      resource: deployments-loggregator
    - get: loggregator-ci
  - task: upload-service-metrics-release
    file: loggregator-ci/tasks/upload-release/task.yml
    input_mapping:
      bosh-release-dir: service-metrics-release
    params:
      BBL_STATE_DIR: ((acceptance_bbl_state_dir))
  - task: copy-ops-files
    file: loggregator-ci/tasks/prepare-service-metrics-ops-and-vars/task.yml
    params:
      ENV_NAME: ((acceptance_env_name))
      BBL_STATE_DIR: ((acceptance_bbl_state_dir))

  - task: deploy-standalone
    file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
    input_mapping:
      vars-store: bbl-state
      ops-files: ops-files
      cf-deployment: service-metrics-release
    params:
      SYSTEM_DOMAIN: ((acceptance_system_domain))
      BBL_STATE_DIR: ((acceptance_bbl_state_dir))
      DEPLOYMENT_NAME: service-metrics-injector
      MANIFEST_FILE: manifests/manifest.yml
      OPS_FILES: |
        on-the-fly.yml

- name: service-metrics-smoke-tests
  serial: true
  plan:
  - aggregate:
    - get: 24h
      trigger: true
    - get: cf-deployment-concourse-tasks
    - get: service-metrics-release
      passed: [service-metrics-deploy]
      trigger: true
    - get: bbl-state
      resource: deployments-loggregator
    - get: loggregator-ci
  - task: test-service-metrics
    file: loggregator-ci/tasks/service-metrics-smoke-test/task.yml
    params:
      BBL_STATE_DIR: ((acceptance_bbl_state_dir))
      CF_API: https://api.((acceptance_system_domain))
      USERNAME: admin
      SOURCE_ID: dummy-source-id

###############################################################################
# SHARED
###############################################################################
- name: cf-deploy
  serial: true
  serial_groups:
  - cf-deploy
  - bosh-cf-cats
  - bosh-cfar-lats
  plan:
  - aggregate:
    - get: loggregator-ci
    - get: denver-deployments
    - get: bbl-state
      resource: deployments-loggregator
    - get: cf-deployment
      trigger: true
    - get: cf-deployment-concourse-tasks
    - get: log-cache-ci
    - get: log-cache-release
      trigger: true
      passed: [log-cache-tests]
    <% bosh_releases.each do |release| %>
    - get: <%= release %>-release
      passed: ["<%= release %>-tests-with-bumped-modules"]
      trigger: true
    <% end %>
    <% clis.each_key do |cli| %>
    - get: <%= cli %>-cli
      passed:
      - <%= cli %>-cli-tests
    <% end %>
  - aggregate:
    <% bosh_releases.each do |release| %>
    - task: upload-<%= release %>-release
      file: loggregator-ci/tasks/upload-release/task.yml
      input_mapping:
        bosh-release-dir: <%= release %>-release
      params:
        BBL_STATE_DIR: ((acceptance_bbl_state_dir))
    <% end %>
    - task: upload-log-cache-release
      file: loggregator-ci/tasks/upload-release/task.yml
      input_mapping:
        bosh-release-dir: log-cache-release
      params:
        BBL_STATE_DIR: ((acceptance_bbl_state_dir))
  - task: copy-ops-files
    file: loggregator-ci/tasks/prepare-cf-ops/task.yml
    params:
      BBL_STATE_DIR: ((acceptance_bbl_state_dir))
  - task: cf-deploy
    file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
    input_mapping:
      vars-files: bbl-state
    params:
      BBL_STATE_DIR: ((acceptance_bbl_state_dir))
      SYSTEM_DOMAIN: ((acceptance_system_domain))
      OPS_FILES: |
        scale-to-one-az.yml
        use-compiled-releases.yml
        use-compiled-releases-windows.yml
        add-metric-store.yml
        loggregator-clients.yml

        windows1803-cell.yml
        use-latest-windows1803-stemcell.yml

        cf-deployment-addon.yml
        cf-add-syslog-agent.yml
        cf-deployment-add-system-metrics-agent.yml
        cf-add-system-metric-scraper.yml
        cf-syslog-agent-skip-cert-verify.yml
        cf-deployment-windows-addon.yml
        cf-syslog-agent-skip-cert-verify-windows.yml
        use-provided-router-certs.yml
        log-cache-syslog-server.yml
        awaiting-cf-deployment-prs.yml

        loggregator-acceptance.yml
      VARS_FILES: ""
  - task: enable-feature-flags
    file: cf-deployment-concourse-tasks/set-feature-flags/task.yml
    attempts: 3
    params:
      SYSTEM_DOMAIN: ((acceptance_system_domain))
      BBL_STATE_DIR: ((acceptance_bbl_state_dir))
      ENABLED_FEATURE_FLAGS: diego_docker
  - task: cleanup
    file: cf-deployment-concourse-tasks/bosh-cleanup/task.yml
    params:
      BBL_STATE_DIR: ((acceptance_bbl_state_dir))
  - task: create-blackbox-space
    file: loggregator-ci/tasks/create-org-and-space/task.yml
    params:
      BBL_STATE_DIR: ((acceptance_bbl_state_dir))
      ORG: system
      SPACE: blackbox-testing
      SYSTEM_DOMAIN: ((acceptance_system_domain))
  - task: create-accumulators-space
    file: loggregator-ci/tasks/create-org-and-space/task.yml
    params:
      BBL_STATE_DIR: ((acceptance_bbl_state_dir))
      ORG: system
      SPACE: accumulators
      SYSTEM_DOMAIN: ((acceptance_system_domain))

- name: test-releases-can-be-exported
  serial: true
  plan:
  - aggregate:
    - get: concourse-tasks
    - get: bbl-state
      resource: deployments-loggregator
    <% standalone_releases.each do |release| %>
    - get: <%= release %>-release
      passed: ["<%= release %>-deploy"]
      trigger: true
    <% end %>
    <% bosh_releases.each do |release| %>
    - get: <%= release %>-release
      trigger: true
      passed: ["cf-deploy"]
    <% end %>
  - task: export-releases
    file: concourse-tasks/release/export/task.yml
    params:
      BBL_STATE_DIR: ((acceptance_bbl_state_dir))
      RELEASE_NAMES: |
        <% (bosh_releases + standalone_releases).each do |release| %><%= release %>
        <% end %>
  - task: show-releases
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: loggregator/base
      inputs:
      - name: exported-releases
      run:
        path: /bin/bash
        args:
        - "-c"
        - |
          set -exuo pipefail
          ls exported-releases

- name: cats
  serial: true
  serial_groups:
  - bosh-cf-cats
  plan:
  - aggregate:
    - get: loggregator-ci
    - get: cf-deployment-concourse-tasks
    - get: deployments-loggregator
    - get: cf-acceptance-tests
    <% bosh_releases.each do |release| %>
    - get: <%= release %>-release
      trigger: true
      passed: ["cf-deploy"]
    <% end %>
  - task: generate-config
    file: loggregator-ci/tasks/generate-cats-config/task.yml
    input_mapping:
      bbl-state: deployments-loggregator
    params:
      BBL_STATE_DIR: ((acceptance_bbl_state_dir))
      SYSTEM_DOMAIN: ((acceptance_system_domain))
  - task: run-cats
    file: cf-deployment-concourse-tasks/run-cats/task.yml
    input_mapping:
      integration-config: cats-config
      cf-acceptance-tests: cf-acceptance-tests
    params:
      CONFIG_FILE_PATH: cats-config.json
      NODES: 9

- name: cfar-lats
  serial: true
  serial_groups:
  - bosh-cfar-lats
  plan:
  - aggregate:
    - get: cfar-logging-acceptance-tests
      trigger: true
    - get: loggregator-ci
    - get: bbl-state
      resource: deployments-loggregator
    - get: cf-drain-cli-master
    <% clis.each_key do |cli| %>
    - get: <%= cli %>-cli
      passed: [cf-deploy]
    <% end %>
    <% bosh_releases.each do |release| %>
    - get: <%= release %>-release
      trigger: true
      passed: ["cf-deploy"]
    <% end %>
  - task: run-cfar-lats
    input_mapping:
      cf-drain-cli: cf-drain-cli-master
    file: loggregator-ci/tasks/cfar-lats/task.yml
    params:
      CF_ADMIN_USER: admin
      CF_DOMAIN: ((acceptance_system_domain))
      BBL_STATE_DIR: ((acceptance_bbl_state_dir))
      SKIP_SSL_VALIDATION: true
      APP_PUSH_TIMEOUT: 180s

###############################################################################
# NOISY NEIGHBOR NOZZLE
###############################################################################
- name: noisy-neighbor-nozzle-tests
  serial: true
  public: true
  plan:
  - aggregate:
    - get: loggregator-ci
    - get: noisy-neighbor-nozzle
      trigger: true
  - task: run-tests
    file: loggregator-ci/tasks/go-test-with-latest-packages/task.yml
    input_mapping:
      source-repo: noisy-neighbor-nozzle
    params:
      IMPORT_PATH: code.cloudfoundry.org/noisy-neighbor-nozzle

- name: noisy-neighbor-nozzle-deploy
  serial: true
  plan:
  - aggregate:
    - get: noisy-neighbor-nozzle
      passed: [noisy-neighbor-nozzle-tests]
      trigger: true
    - get: loggregator-ci
    - get: bbl-state
      resource: deployments-loggregator
  - task: noisy-neighbor-nozzle-deploy
    file: loggregator-ci/tasks/noisy-neighbor-nozzle-deploy/task.yml
    params:
      SYSTEM_DOMAIN: ((acceptance_system_domain))
      APP_DOMAIN: ((acceptance_system_domain))
      ORG: "system"
      SPACE: "accumulators"
      CLIENT_ID: noisy-neighbor-nozzle
      SUBSCRIPTION_ID: ((noisy-neighbor-nozzle-subscription-id))
      USERNAME: admin
      DATADOG_API_KEY: ((datadog-loggregator-api-key))
      NOZZLE_COUNT: 4
      BBL_STATE_DIR: ((acceptance_bbl_state_dir))