#!/bin/bash

set -ex

MESSAGE="$MESSAGE-$RANDOM"

go get code.cloudfoundry.org/loggregator-tools/rlpreader

function report_to_datadog {
  currenttime="$(date +%s)"
  SYSTEM_DOMAIN=k8s-playground
  APP_NAME=k8s-playground-blackbox
  curl --fail -X POST -H "Content-type: application/json" \
  -d "{ \"series\" :
    [
      {
        \"metric\":\"smoke_test.loggregator.k8s_delay\",
        \"points\":[[${currenttime}, ${DELAY}]],
        \"type\":\"gauge\",
        \"host\":\"${SYSTEM_DOMAIN}\",
        \"tags\":[
          \"${APP_NAME}\",
          \"delay_unit:${DELAY_UNIT}\"
        ]
      },
      {
        \"metric\":\"smoke_test.loggregator.k8s_msg_count\",
        \"points\":[[${currenttime}, ${MSG_COUNT}]],
        \"type\":\"gauge\",
        \"host\":\"${SYSTEM_DOMAIN}\",
        \"tags\":[
          \"${APP_NAME}\"
        ]
      },
      {
        \"metric\":\"smoke_test.loggregator.k8s_cycles\",
        \"points\":[[${currenttime}, ${CYCLES}]],
        \"type\":\"gauge\",
        \"host\":\"${SYSTEM_DOMAIN}\",
        \"tags\":[
          \"${APP_NAME}\"
        ]
      }
    ]
  }" \
  'https://app.datadoghq.com/api/v1/series?api_key='"$DATADOG_API_KEY"

  killall rlpreader
  killall kubectl
  killall ssh
  killall ssh-agent
}
trap report_to_datadog EXIT

MSG_COUNT=0

eval "$(ssh-agent)"
pushd deployments-loggregator/gcp/playground
    source .envrc
    set +e
    source k8s_login
    set -e
    echo "
apiVersion: v1
kind: Namespace
metadata:
  name: blackbox-tests
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: logspinner
  namespace: blackbox-tests
  labels:
    run: logspinner
spec:
  replicas: 1
  selector:
    matchLabels:
      run: logspinner
  template:
    metadata:
      labels:
        run: logspinner
    spec:
      containers:
      - name: logspinner
        image: loggregator/logspinner
        env:
        - name: PORT
          value: \"8080\"
" | kubectl apply -f -
    pod_name="$(
        kubectl get pod -l run=logspinner \
            --output=json \
            --namespace blackbox-tests | \
            jq --raw-output .items[0].metadata.name
    )"
    while true; do
        status="$(
            kubectl get pod "$pod_name" \
                --output=json \
                --namespace blackbox-tests | \
                jq --raw-output .status.phase
        )"
        if [ "$status" = "Running" ]; then
            break
        fi
        sleep 10
    done

    set +x
    certs="$(
        kubectl get secret loggregator-tls-certs --namespace oratos --output=json | \
            jq .data
    )"
    echo "$certs" | jq --raw-output '.["rlp.crt"]' | base64 -d > /tmp/rlp.crt
    echo "$certs" | jq --raw-output '.["rlp.key"]' | base64 -d > /tmp/rlp.key
    echo "$certs" | jq --raw-output '.["ca.crt"]' | base64 -d > /tmp/ca.crt

    set -x

    target="$(
        kubectl --namespace oratos get service loggregator-rlp --output=json | \
            jq --raw-output .status.loadBalancer.ingress[0].ip
    ):8082"

    kubectl port-forward "$pod_name" 8080:8080 \
        --namespace blackbox-tests > /dev/null &
    sleep 3
popd

echo "Collecting logs for $pod_name"

rlpreader \
    -app-id "blackbox-tests/deployment/logspinner" \
    -target "$target" \
    -ca "/tmp/ca.crt" \
    -cert "/tmp/rlp.crt" \
    -key "/tmp/rlp.key" > output.txt &

sleep 30 # wait 30 seconds to establish connection

echo "Triggering $pod_name"
curl "http://localhost:8080?cycles=$CYCLES&delay=$DELAY$DELAY_UNIT&text=$MESSAGE"

sleep "$WAIT" # wait for a bit to collect logs

MSG_COUNT=$(grep -c "$MESSAGE" output.txt)

if [ "$MSG_COUNT" -lt $(($CYCLES * 99 / 100)) ]; then
    echo the reliability test did not meet our SLO
    exit 123
fi

# Trap will send metrics to datadog
