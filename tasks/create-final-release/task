#!/bin/bash

# vi:syntax=sh

# -------------------
# Create a release from a repo and branch: master-repo and
# MASTER_BRANCH.

function join_by {
  local IFS="$1"
  shift
  echo "$*"
}

set -exo pipefail

expected_version=$(cat version/version)

pushd master-repo
  NEW_VERSION=$(cat src/version)
  if [[ "${NEW_VERSION}" != "${expected_version}" ]]; then
    echo "Version in master-repo (${NEW_VERSION}) does not equal expected version from version resource (${expected_version})"
    exit 1
  fi

  old_tag=$(git describe --abbrev=0 --tags --match v*)
  set +x
  BUMPER_RESULT=$( (bumper --commit-range ${old_tag}..HEAD --verbose --no-color) 2>&1 | grep -v "Bump modules")
  GIT_DIFF_JOBS=$(git diff ${old_tag}..HEAD -- jobs)
  set -x
popd

tag_name="v$NEW_VERSION"

# write out github release files
echo "$RELEASE_NAME $NEW_VERSION" > github-release/name
echo $tag_name > github-release/tag
printf '## BUMPER OUTPUT\n%s\n\n' "$BUMPER_RESULT" >> github-release/body
printf '## GIT DIFF jobs directory\n```diff\n%s\n```\n\n' "${GIT_DIFF_JOBS}" >> github-release/body

# setup ssh for reading from github
eval "$(ssh-agent -s)"
mkdir -p ~/.ssh
echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
ssh-add <(echo "$SSH_KEY")

# build final release on MASTER_BRANCH
pushd master-repo
  # this is needed to land commits on master since the commit for
  # master is checked out as a detatched head when the git
  # resource clones it down
  git checkout $MASTER_BRANCH

  blobstore_provider=$(yq r config/final.yml blobstore.provider)

  if [[$blobstore_provider eq "gcs"]]; then
    cat << EOF > config/private.yml
---
blobstore:
  options:
    credentials_source: static
    json_key: |
      $(echo ${JSON_KEY})
EOF
  else
  # setup private.yml used by `create-release --final`
    cat << EOF > config/private.yml
---
blobstore:
  provider: s3
  options:
    bucket_name: $BLOBSTORE_BUCKET
    access_key_id: $S3_ACCESS_KEY
    secret_access_key: $S3_SECRET_KEY
    credentials_source: static
EOF
  fi

  # create final release and commit artifcats
  bosh -n create-release --sha2 --final \
    --tarball ../github-release/release.tgz \
    --version "$NEW_VERSION"
  git add .
  git commit -m "Create final release"

  final_release_abbrev=$(git rev-parse --abbrev-ref HEAD)
  final_release_sha=$(git rev-parse HEAD)
  git tag "$tag_name" $final_release_sha
popd

# copy repos into output
cp -r master-repo repos
