#!/bin/bash

function join_by {
  local IFS="$1"
  shift
  echo "$*"
}

set -exo pipefail

# setup ssh for reading from github
eval "$(ssh-agent -s)"
mkdir -p ~/.ssh
echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
ssh-add <(echo "$SSH_KEY")

pushd release-repo
  git checkout $BACKPORT_BRANCH
  old_tag=$(git describe --abbrev=0 --tags --match 'v*' || true)
  if [[ $old_tag == "" ]]; then
    exit 1
  fi

  old_version=${old_tag//v}
  split_version=( ${old_version//./ })

  length="${#split_version[@]}"
  if [[ $length -lt 3 ]]; then
    patch=1
  else
    # bump patch
    patch=`expr ${split_version[2]} + 1`
  fi

  split_version[2]=${patch}
  NEW_VERSION=$(join_by . "${split_version[@]}")
  commit_range="${old_tag}..HEAD"

  set +x
  BUMPER_RESULT=$( (bumper --commit-range ${commit_range} --verbose --no-color) 2>&1 | grep -v "Bump modules")
  BUMPER_RESULT=${BUMPER_RESULT//  / &nbsp; &nbsp;}
  BUMPER_RESULT=${BUMPER_RESULT//... / &nbsp; &nbsp;}
  GIT_DIFF_JOBS=$(git diff ${commit_range} -- jobs)
  set -x
popd

tag_name="v$NEW_VERSION"

# write out github release files
echo "$RELEASE_NAME $NEW_VERSION" > github-release/name
echo $tag_name > github-release/tag
printf '## BUMPER OUTPUT\n%s\n\n' "$BUMPER_RESULT" >> github-release/body
printf '## GIT DIFF jobs directory\n```diff\n%s\n```\n\n' "${GIT_DIFF_JOBS}" >> github-release/body

# build final release on BACKPORT_BRANCH
pushd release-repo
  blobstore_provider=$(yq r config/final.yml blobstore.provider)

  if [[ $blobstore_provider == "gcs" ]]; then
    cat << EOF > config/private.yml
---
blobstore:
  options:
    credentials_source: static
    json_key: |
      $(echo ${JSON_KEY})
EOF
  else
  # setup private.yml used by `create-release --final`
    cat << EOF > config/private.yml
---
blobstore:
  provider: s3
  options:
    bucket_name: $BLOBSTORE_BUCKET
    access_key_id: $S3_ACCESS_KEY
    secret_access_key: $S3_SECRET_KEY
    credentials_source: static
EOF
  fi

  # create final release and commit artifcats
  bosh -n create-release --sha2 --final \
    --tarball ../github-release/release.tgz \
    --version "$NEW_VERSION"
  git add .
  git commit -m "Create final release"

  final_release_abbrev=$(git rev-parse --abbrev-ref HEAD)
  final_release_sha=$(git rev-parse HEAD)
  git tag "$tag_name" $final_release_sha
popd

cp -r release-repo repos
