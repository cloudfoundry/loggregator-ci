#!/bin/bash
set -ex

function report_to_datadog {
    ruby -rdogapi -e "$(cat <<RUBY
ENV["DATADOG_API_KEY"].split(' ').each do |k|
  client = Dogapi::Client.new(k)

  metadata = {
    timestamp: Time.now,
    host: ENV["CF_API"],
    tags: [
      ENV["APP_NAME"],
      "delay_unit:#{ENV["DELAY_UNIT"]}",
    ],
  }

  client.batch_metrics do
    client.emit_point("smoke_test.loggregator.delay", ENV["DELAY"].to_i, metadata)
    client.emit_point("smoke_test.loggregator.msg_count", ENV["MSG_COUNT"], metadata)
    client.emit_point("smoke_test.loggregator.cycles", ENV["CYCLES"].to_i, metadata)
  end

end
RUBY
)"
}

function report_logs {
    if [[ $MSG_COUNT -eq 0 ]]; then
        set +x
        echo "************************* OUTPUT *************************"
        cat output.txt
        echo "************************* OUTPUT *************************"
        set -x
    fi
}

function report {
    report_logs
    report_to_datadog
}

export MSG_COUNT=0

trap report EXIT

source loggregator-ci/scripts/environment-targeting/target-cf.sh && target-cf

# cf logs to a file
rm -f output.txt
echo "Collecting logs for $APP_NAME"
cf logs "$APP_NAME" > output.txt 2>&1 &
sleep 30 # wait 30 seconds to establish connection

# curl my logspinner
echo "Triggering $APP_NAME"
curl "$APP_DOMAIN?cycles=$CYCLES&delay=$DELAY$DELAY_UNIT&text=$MESSAGE"

sleep "$WAIT" # wait for a bit to collect logs

MSG_COUNT=$(grep APP output.txt | grep -c "$MESSAGE")

if [ "$MSG_COUNT" -lt $(($CYCLES * 99 / 100)) ]; then
    echo the reliability test did not meet our SLO
    exit 123
fi

# Trap will send metrics to datadog
