#!/usr/bin/env bash
set -eo pipefail
source loggregator-ci/scripts/environment-targeting/target-cf.sh
target-cf
pushd "bbl-state/${BBL_STATE_DIR}" > /dev/null
  eval "$(bbl print-env)"
popd > /dev/null

function contains() {
  if [[ $1 =~ (^|[[:space:]])$2($|[[:space:]]) ]]; then
    return 0
  else
    return 1
  fi
}

function check_for_expected_source_ids() {
  printf 'Checking for expected source IDs\n\n'
  local exit_code=0

  log_meta_output=$(curl --silent log-cache.${DOMAIN}/api/v1/meta -H "Authorization: $(cf oauth-token)")

  expected_source_ids=${STATIC_SOURCE_IDS}
  for j in releases/**/jobs/*; do
    job_name=$(basename $j)
    if ! contains "${JOB_BLACKLIST}" ${job_name} && [[ $j != *"windows"* ]] && [[ $j != *"fake"* ]]; then
      expected_source_ids+=(${job_name})
    fi
  done

  found_source_ids=()
  missing_source_ids=()
  five_minutes_ago_seconds=$(date --date '-5 min' +%s)

  set +e
  for source_id in ${expected_source_ids[@]}; do
    source_id_without_loggr_prefix=${source_id#loggr-}
    source_id_regex="^(?:loggr-)?${source_id_without_loggr_prefix//-/'[-_]'}$"
    source_id_last_emitted_seconds=$(echo ${log_meta_output} | jq -r '.meta | to_entries | map(select(.key | test("'${source_id_regex}'")).value) | .[].newestTimestamp' | cut -b1-10)
    if [[ ${source_id_last_emitted_seconds} -lt ${five_minutes_ago_seconds} ]]; then
      exit_code=1
      missing_source_ids+=(${source_id})
    else
      found_source_ids+=(${source_id})
    fi
  done
  set -e

  printf '\nFound metrics for the following source ids:\n'
  printf '\t%s\n' "${found_source_ids[@]}"

  if [[ ${exit_code} -eq 1 ]]; then
    echo ${log_meta_output} | jq .

    printf '\nNo metrics were found for the following source ids:\n'
    printf '\t%s\n' "${missing_source_ids[@]}"
  fi

  return ${exit_code}
}

function query_metrics() {
  query=$1
  curl --silent -G \
    ${METRIC_SOURCE}/api/v1/query \
    --data-urlencode 'query='"$query"'' \
    -H "Authorization: $(cf oauth-token)" | jq .data.result
}

function check_for_metrics_from_all_instances() {
  printf 'Checking for metrics from all instances\n\n'
  local exit_code=0
  system_metrics_result=$(query_metrics 'sum(system_mem_percent{source_id="system_metrics_agent"}) by (index)')
  instances=$(bosh -d cf vms --column=Instance --json | jq -r .Tables[0].Rows[].instance)

  missing_instances=()

  set +e
  for instance in ${instances}; do
    jq -e '.[] | select(.metric.index == "'${instance##*/}'")' <<< "$system_metrics_result" > /dev/null
    instance_found=$?

    if [[ ${instance_found} -ne 0 ]]  ; then
      missing_instances+=(${instance})

      exit_code=1
    fi
  done
  set -e

  if [[ ${exit_code} -eq 1 ]]; then
    printf '\nMissing metrics for the following instances:\n'
    printf '\t%s\n' "${missing_instances[@]}"
  else
    echo "Found metrics for all instances from ${METRIC_SOURCE}"
    jq -r . <<< ${system_metrics_result}
  fi

  return ${exit_code}
}

function check_for_prom_scraper_failures() {
  printf 'Checking for prom scraper failures\n\n'
  prom_scraper_failures=$(query_metrics 'sum(rate(failed_scrapes_total{source_id="prom_scraper"}[3m])) by (scrape_target_source_id) > 10')

  failures_length=$(jq '. | length' <<< ${prom_scraper_failures})
  if [[ "$failures_length" -gt 0 ]]; then
    printf '\nProm Scraper is failing to scrape the following\n'
    echo ${prom_scraper_failures}

    return 1
  fi

  echo 'No prom scraper failures'
}

exit_code=0

if [[ "$INSTANCE_CHECK_ONLY" == "false" ]]; then
  check_for_expected_source_ids
  exit_code=$((exit_code+ $?))

  check_for_prom_scraper_failures
  exit_code=$((exit_code+ $?))
fi

check_for_metrics_from_all_instances
exit_code=$((exit_code+ $?))

exit ${exit_code}
