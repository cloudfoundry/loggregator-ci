#!/bin/bash

set -ex

function fail_on_empty {
    if [ "$1" = "" ]; then
        exit 1
    fi
}

login_args=""
if [ "$SKIP_SSL_VALIDATION" = "true" ]; then
    login_args="--skip-ssl-validation"
fi

# target api
cf login \
  -a api."$SYSTEM_DOMAIN" \
  -u "$USERNAME" \
  -p "$PASSWORD" \
  -s "$SPACE" \
  -o "$ORG" \
  $login_args

GOPATH=$PWD/go

pushd loggregator-tools/log-cache-blackbox
  go get -d ./...
  go build

  cf push "$APP_NAME" -b binary_buildpack -c ./log-cache-blackbox -m 1G --no-start
  cf set-env "$APP_NAME" LOG_CACHE_ADDR "$LOG_CACHE_ADDR"
  cf set-env "$APP_NAME" UAA_ADDR https://uaa."$SYSTEM_DOMAIN"
  cf set-env "$APP_NAME" UAA_CLIENT $UAA_CLIENT
  cf set-env "$APP_NAME" UAA_CLIENT_SECRET $UAA_CLIENT_SECRET

  if [ "$SKIP_SSL_VALIDATION" = "true" ]; then
    cf set-env "$APP_NAME" SKIP_SSL_VALIDATION $SKIP_SSL_VALIDATION
  fi

  cf start "$APP_NAME"
popd

sizes=(1 2 10)

for s in ${sizes[*]}; do
    echo "Latency test - group size: ${s}"
    response=$(curl "${APP_ADDR}/group?size=${s}" -d='')

    latency=$(echo "$response" | jq .latency)
    avg_query_time=$(echo "$response" | jq .averageQueryTime)

    fail_on_empty "$latency"
    fail_on_empty "$avg_query_time"

    echo "Reliability test - group size: ${s}"
    response=$(curl "${APP_ADDR}/group/reliability?size=${s}" -d='')

    logs_sent=$(echo "$response" | jq .logsSent)
    logs_received=$(echo "$response" | jq .logsReceived)

    fail_on_empty "$logs_received"

    currenttime=$(date +%s)
    curl --fail -X POST -H "Content-type: application/json" \
    -d "{ \"series\" :
      [
        {
          \"metric\":\"log-cache-group-blackbox.latency\",
          \"points\":[[${currenttime}, ${latency}]],
          \"type\":\"gauge\",
          \"host\":\"${SYSTEM_DOMAIN}\",
          \"tags\":[\"${APP_NAME}\", \"group-size-${s}\"]
        },
        {
          \"metric\":\"log-cache-group-blackbox.avg_query_time\",
          \"points\":[[${currenttime}, ${avg_query_time}]],
          \"type\":\"gauge\",
          \"host\":\"${SYSTEM_DOMAIN}\",
          \"tags\":[\"${APP_NAME}\", \"group-size-${s}\"]
        },
        {
          \"metric\":\"log-cache-group-blackbox.logs_sent\",
          \"points\":[[${currenttime}, ${logs_sent}]],
          \"type\":\"gauge\",
          \"host\":\"${SYSTEM_DOMAIN}\",
          \"tags\":[\"${APP_NAME}\", \"group-size-${s}\"]
        },
        {
          \"metric\":\"log-cache-group-blackbox.logs_received\",
          \"points\":[[${currenttime}, ${logs_received}]],
          \"type\":\"gauge\",
          \"host\":\"${SYSTEM_DOMAIN}\",
          \"tags\":[\"${APP_NAME}\", \"group-size-${s}\"]
        }
      ]
    }" \
    'https://app.datadoghq.com/api/v1/series?api_key='"$DATADOG_API_KEY"
done
