#!/bin/bash

set -ex

CF_API=api."$DOMAIN"

function report_to_datadog {
    ruby -rdogapi -e "$(cat <<RUBY
ENV["DATADOG_API_KEY"].split(' ').each do |k|
  client = Dogapi::Client.new(k)

  metadata = {
    timestamp: Time.now,
    host: ENV["CF_API"],
    tags: [
      ENV["APP_NAME"],
      "delay_unit:#{ENV["DELAY_UNIT"]}",
    ],
  }

  client.batch_metrics do
    client.emit_point("smoke_test.loggregator-stream.delay", ENV["DELAY"].to_i, metadata)
    client.emit_point("smoke_test.loggregator-stream.msg_count", ENV["MSG_COUNT"], metadata)
    client.emit_point("smoke_test.loggregator-stream.cycles", ENV["CYCLES"].to_i, metadata)
  end

end
RUBY
)"
}

function read_event_stream {
    ruby -rem-eventsource -rjson -rbase64 -e "$(cat <<RUBY
STDOUT.sync = true

EM.run do
  source = EventMachine::EventSource.new("https://log-stream.#{ENV["DOMAIN"]}/v2/read",
                                         {"log" => "", "source_id" => ENV['SOURCE_ID']},
                                         {"Authorization" => ENV['TOKEN']})
  totalCount = 0
  appLogCount = 0
  source.message do |message|
    batch = JSON.parse(message, symbolize_names: true)

    batch[:batch].each do |env|
      totalCount += 1

      if env[:tags] && env[:tags][:source_type]
        if env[:tags][:source_type].start_with?("APP")
          appLogCount += 1
          puts Base64.decode64(env[:log][:payload])
        end
      end
    end

    puts "Total: #{totalCount}, App Logs: #{appLogCount}"
  end

  source.error do |error|
    puts "new error #{error}"
  end

  source.start # Start listening
end
RUBY
)"
}

export MSG_COUNT=0

trap report_to_datadog EXIT

# target api
cf login \
    -a "$CF_API" \
    -u "$USERNAME" \
    -p "$PASSWORD" \
    -s "$SPACE" \
    -o "$ORG" \
    --skip-ssl-validation # TODO: pass this in as a param

# cf logs to a file
rm -f output.txt
echo "Collecting logs for $APP_NAME"

set +x
TOKEN="$(cf oauth-token)" SOURCE_ID="$(cf app $APP_NAME --guid)" read_event_stream > output.txt &
set -x

sleep 30 # wait 30 seconds to establish connection

# curl my logspinner
echo "Triggering $APP_NAME"
curl "$APP_NAME"."$DOMAIN?cycles=$CYCLES&delay=$DELAY$DELAY_UNIT&text=$MESSAGE"

sleep "$WAIT" # wait for a bit to collect logs

MSG_COUNT=$(grep -o $MESSAGE output.txt | wc -l)

if [ "$MSG_COUNT" -lt $(($CYCLES * 99 / 100)) ]; then
    echo the reliability test did not meet our SLO
    exit 123
fi

# Trap will send metrics to datadog
