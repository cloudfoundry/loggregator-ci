dropsonde_unit_tests: |
  #!/bin/bash -e

  set -x

  export GOPATH=$(pwd)
  export PATH=$PATH:$GOPATH/bin

  mkdir -p $GOPATH/src/github.com/cloudfoundry/
  cp -r dropsonde $GOPATH/src/github.com/cloudfoundry/

  cd $GOPATH/src/github.com/cloudfoundry/dropsonde

  go get -d -v -t ./...

  bin/test

noaa_unit_tests: |
  #!/bin/bash -e

  set -x

  export GOPATH=$(pwd)
  export PATH=$PATH:$GOPATH/bin

  mkdir -p $GOPATH/src/github.com/cloudfoundry/
  cp -r noaa $GOPATH/src/github.com/cloudfoundry/

  cd $GOPATH/src/github.com/cloudfoundry/noaa

  go get -d -v -t ./...

  bin/test

loggregatorlib_unit_tests: |
  #!/bin/bash -ex

  export GOPATH=$PWD/loggregator
  export PATH=$PATH:$GOPATH/bin

  TARGET=$GOPATH/src/github.com/cloudfoundry/loggregatorlib
  rm -rf $TARGET
  mkdir $TARGET
  cp -r loggregatorlib/. $TARGET

  go install github.com/coreos/etcd

  cd $TARGET
  bin/test

bump_submodule: |
  #!/bin/bash -e

  set -x

  bump_submodule() {
    PARENT_REPO_DIR=$1
    SUBMODULE_PATH_WITHIN_PARENT=$2
    LOCAL_REMOTE_URL=$3
    LOCAL_REMOTE_BRANCH=$4

    cd $PARENT_REPO_DIR

    git submodule update --init --recursive
    git status

    if ! git diff-index --quiet HEAD; then
      git status
      echo "uncommitted changes, aborting" >&2
      exit 1
    fi

    pushd $SUBMODULE_PATH_WITHIN_PARENT
    if git remote -v | grep -w '^local' >/dev/null; then
      git remote remove local
    fi

    git remote add local $LOCAL_REMOTE_URL
    git fetch local

    SHA_FROM=`git rev-parse HEAD`
    git checkout local/$LOCAL_REMOTE_BRANCH
    SHA_TO=`git rev-parse HEAD`
    SUBMODULE_LOG=`git log --oneline $SHA_FROM...$SHA_TO`

    popd

    if ! git diff-index --quiet HEAD; then
      git add $SUBMODULE_PATH_WITHIN_PARENT

      git config user.email "cf-loggregator@pivotal.io"
      git config user.name "Loggregator CI"
      git commit -m "bump `basename $LOCAL_REMOTE_URL`

  $SUBMODULE_LOG

  automatic promotion by CI workflow"
    fi
  }


  WORKSPACE=$(pwd)

  if [ -z "$PARENT" ]; then
    echo "must specify \$PARENT" >&2
    exit 1
  fi

  if [ -z "$SUBMODULE_PATH" ]; then
    echo "must specify \$SUBMODULE_PATH" >&2
    exit 1
  fi

  if [ -z "$SUBMODULE" ]; then
    echo "must specify \$SUBMODULE" >&2
    exit 1
  fi

  # Add github.com to known_hosts to prevent any interactive prompts
  mkdir -p ~/.ssh/
  ssh-keyscan github.com >> ~/.ssh/known_hosts
  cp -r $WORKSPACE/$PARENT/. $WORKSPACE/$OUTPUT
  bump_submodule $WORKSPACE/$OUTPUT $SUBMODULE_PATH $WORKSPACE/$SUBMODULE master
statsd_units: |
  #!/bin/bash

  set -e -x

  rm -rf statsd-injector-release/src/github.com/cloudfoundry/statsd-injector/{*,.git}
  cp -r statsd-injector/. statsd-injector-release/src/github.com/cloudfoundry/statsd-injector/

  pushd statsd-injector-release
    export GOPATH="$PWD"
    export PATH="$GOPATH/bin:$PATH"
    go install github.com/onsi/ginkgo/ginkgo
    ginkgo -r -race -randomizeAllSpecs ./src/github.com/cloudfoundry/statsd-injector
  popd
bosh_hm_forwarder_units: |
  #!/bin/bash

  set -e -x

  rm -rf bosh-hm-forwarder-release/src/github.com/cloudfoundry/bosh-hm-forwarder/{*,.git}
  cp -r bosh-hm-forwarder/. bosh-hm-forwarder-release/src/github.com/cloudfoundry/bosh-hm-forwarder/

  pushd bosh-hm-forwarder-release
    export GOPATH="$PWD"
    export PATH="$GOPATH/bin:$PATH"
    go install github.com/onsi/ginkgo/ginkgo
    ginkgo -r -race -randomizeAllSpecs ./src/github.com/cloudfoundry/bosh-hm-forwarder
  popd
upload_blobs: |
  #!/bin/bash
  set -ex

  pushd "${RELEASE}"
    cat << EOF > config/private.yml
  ---
  blobstore:
    provider: s3
    options:
      bucket_name: $S3_BUCKET
      access_key_id: $S3_ACCESS_KEY
      secret_access_key: $S3_SECRET_KEY
  EOF

    bosh -n sync-blobs

    ./scripts/blobify
    bosh -n upload-blobs
  popd

  cp -r "${RELEASE}/." "${OUTPUT}/"
update_package_specs: |
  #!/bin/bash

  set -ex

  pushd "${RELEASE}"
    export GOPATH="${PWD}"
    export PATH="${GOPATH}/bin:${PATH}"
    ./scripts/sync-package-specs
  popd

  cp -r "${RELEASE}/." "${OUTPUT}/"
update_submodule: |
  #!/bin/bash

  set -ex

  pushd "${CHILD}"
    target_sha="$(git rev-parse HEAD)"
  popd

  pushd "${PARENT}/${CHILD_PATH}"
    git fetch
    git checkout "$target_sha"
  popd

  cp -r "${PARENT}/." "${OUTPUT}/"
commit: |
  #!/bin/bash
  set -ex

  pushd "${SOURCE}"
    if [ ! "$(git status --porcelain)" = "" ]; then
      git config user.email "cf-loggregator@pivotal.io"
      git config user.name "Loggregator CI"
      git add ${PATHS}
      git commit -m "$COMMIT_MESSAGE"
    else
      echo "No changes to commit"
    fi
  popd

  cp -r "${SOURCE}/." "${OUTPUT}/"

create-bosh-lite: |
  #!/bin/bash
  set -eux
  export BOSH_LITE_NAME=$VM_NAME

  creds_location='/tmp/google_creds'
  cat <<EOF > "${creds_location}"
  ${GOOGLE_CREDENTIALS}
  EOF

  if gcloud compute instances delete -q --zone "${GCE_ZONE}" "${VM_NAME}"
  then
    echo "Deleted instance ${VM_NAME}"
  fi


  cat <<EOF > Vagrantfile
  Vagrant.configure('2') do |config|
    config.vm.box = "cloudfoundry/bosh-lite"
    config.vm.provider :google do |google, override|
      google.google_project_id = "${PROJECT_ID}"
      google.google_client_email = "${PROJECT_EMAIL_ADDR}"
      google.google_json_key_location = "${creds_location}"
      google.tags = ["bosh", "vms"]
    end
  end
  EOF

  vagrant up --provider=google

prepare-docker-image: |
  #!/bin/bash
  set -e
  mkdir build-image/build
  cp -R "image-dockerfile/docker-images/$IMAGE_NAME/"* build-image/build/
  if [ -d additional-files ]; then
    cp -R additional-files/* build-image/build/
  fi
  pushd image-dockerfile > /dev/null
    sha=$(git rev-parse @)
  popd > /dev/null
  echo "$sha" > build-image/tag
